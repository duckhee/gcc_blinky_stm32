ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"I2CRoutines.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.I2C_Master_BufferRead,"ax",%progbits
  20              		.align	2
  21              		.global	I2C_Master_BufferRead
  22              		.thumb
  23              		.thumb_func
  25              	I2C_Master_BufferRead:
  26              	.LFB28:
  27              		.file 1 "Src/Sensor/I2CRoutines.c"
   1:Src/Sensor/I2CRoutines.c **** /**
   2:Src/Sensor/I2CRoutines.c ****   ******************************************************************************
   3:Src/Sensor/I2CRoutines.c ****   * @file OptimizedI2Cexamples/src/I2CRoutines.c
   4:Src/Sensor/I2CRoutines.c ****   * @author  MCD Application Team
   5:Src/Sensor/I2CRoutines.c ****   * @version  V4.0.0
   6:Src/Sensor/I2CRoutines.c ****   * @date  06/18/2010
   7:Src/Sensor/I2CRoutines.c ****   * @brief  Contains the I2Cx slave/Master read and write routines.
   8:Src/Sensor/I2CRoutines.c ****   ******************************************************************************
   9:Src/Sensor/I2CRoutines.c ****   * @copy
  10:Src/Sensor/I2CRoutines.c ****   *
  11:Src/Sensor/I2CRoutines.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:Src/Sensor/I2CRoutines.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:Src/Sensor/I2CRoutines.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:Src/Sensor/I2CRoutines.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:Src/Sensor/I2CRoutines.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:Src/Sensor/I2CRoutines.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:Src/Sensor/I2CRoutines.c ****   *
  18:Src/Sensor/I2CRoutines.c ****   * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
  19:Src/Sensor/I2CRoutines.c ****   */
  20:Src/Sensor/I2CRoutines.c **** 
  21:Src/Sensor/I2CRoutines.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/Sensor/I2CRoutines.c **** #include "I2CRoutines.h"
  23:Src/Sensor/I2CRoutines.c **** #include "hw_config.h"
  24:Src/Sensor/I2CRoutines.c **** 
  25:Src/Sensor/I2CRoutines.c **** /** @addtogroup Optimized I2C examples
  26:Src/Sensor/I2CRoutines.c ****   * @{
  27:Src/Sensor/I2CRoutines.c ****   */
  28:Src/Sensor/I2CRoutines.c **** 
  29:Src/Sensor/I2CRoutines.c **** /* Private typedef -----------------------------------------------------------*/
  30:Src/Sensor/I2CRoutines.c **** /* Private define ------------------------------------------------------------*/
  31:Src/Sensor/I2CRoutines.c **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 2


  32:Src/Sensor/I2CRoutines.c **** /* Private variables ---------------------------------------------------------*/
  33:Src/Sensor/I2CRoutines.c **** 
  34:Src/Sensor/I2CRoutines.c **** DMA_InitTypeDef  I2CDMA_InitStructure;
  35:Src/Sensor/I2CRoutines.c **** 
  36:Src/Sensor/I2CRoutines.c **** __IO uint32_t I2CDirection = I2C_DIRECTION_TX;
  37:Src/Sensor/I2CRoutines.c **** __IO uint32_t NumbOfBytes1;
  38:Src/Sensor/I2CRoutines.c **** __IO uint32_t NumbOfBytes2;
  39:Src/Sensor/I2CRoutines.c **** __IO uint8_t Address;
  40:Src/Sensor/I2CRoutines.c **** 
  41:Src/Sensor/I2CRoutines.c **** /* Buffer of data to be received by I2C1 */
  42:Src/Sensor/I2CRoutines.c **** uint8_t Buffer_Rx1[255];
  43:Src/Sensor/I2CRoutines.c **** /* Buffer of data to be transmitted by I2C1 */
  44:Src/Sensor/I2CRoutines.c **** uint8_t Buffer_Tx1[255];
  45:Src/Sensor/I2CRoutines.c **** /* Buffer of data to be received by I2C2 */
  46:Src/Sensor/I2CRoutines.c **** uint8_t Buffer_Rx2[255];
  47:Src/Sensor/I2CRoutines.c **** /* Buffer of data to be transmitted by I2C2 */
  48:Src/Sensor/I2CRoutines.c **** uint8_t Buffer_Tx2[255];
  49:Src/Sensor/I2CRoutines.c **** 
  50:Src/Sensor/I2CRoutines.c **** /* Private function prototypes -----------------------------------------------*/
  51:Src/Sensor/I2CRoutines.c **** /* Private functions ---------------------------------------------------------*/
  52:Src/Sensor/I2CRoutines.c **** /**
  53:Src/Sensor/I2CRoutines.c ****   * @brief  Reads buffer of bytes  from the slave.
  54:Src/Sensor/I2CRoutines.c ****   * @param pBuffer: Buffer of bytes to be read from the slave.
  55:Src/Sensor/I2CRoutines.c ****   * @param NumByteToRead: Number of bytes to be read by the Master.
  56:Src/Sensor/I2CRoutines.c ****   * @param Mode: Polling or DMA or Interrupt having the highest priority in the application.
  57:Src/Sensor/I2CRoutines.c ****   * @param SlaveAddress: The address of the slave to be addressed by the Master.
  58:Src/Sensor/I2CRoutines.c ****   * @retval : None.
  59:Src/Sensor/I2CRoutines.c ****   */
  60:Src/Sensor/I2CRoutines.c **** Status I2C_Master_BufferRead(I2C_TypeDef* I2Cx, uint8_t* pBuffer,
  61:Src/Sensor/I2CRoutines.c ****                     uint32_t NumByteToRead, I2C_ProgrammingModel Mode, uint8_t SlaveAddress)
  62:Src/Sensor/I2CRoutines.c **** {
  28              		.loc 1 62 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 30B5     		push	{r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 83B0     		sub	sp, sp, #12
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 0446     		mov	r4, r0
  43 0006 0D46     		mov	r5, r1
  44 0008 9DF81800 		ldrb	r0, [sp, #24]	@ zero_extendqisi2
  45              	.LVL1:
  63:Src/Sensor/I2CRoutines.c ****     __IO uint32_t temp = 0;
  46              		.loc 1 63 0
  47 000c 0021     		movs	r1, #0
  48              	.LVL2:
  49 000e 0191     		str	r1, [sp, #4]
  64:Src/Sensor/I2CRoutines.c ****     __IO uint32_t Timeout = 0;
  50              		.loc 1 64 0
  51 0010 0091     		str	r1, [sp]
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 3


  65:Src/Sensor/I2CRoutines.c **** 
  66:Src/Sensor/I2CRoutines.c ****     /* Enable I2C errors interrupts (used in all modes: Polling, DMA and Interrupts */
  67:Src/Sensor/I2CRoutines.c ****     I2Cx->CR2 |= I2C_IT_ERR;
  52              		.loc 1 67 0
  53 0012 A188     		ldrh	r1, [r4, #4]
  54 0014 89B2     		uxth	r1, r1
  55 0016 41F48071 		orr	r1, r1, #256
  56 001a A180     		strh	r1, [r4, #4]	@ movhi
  68:Src/Sensor/I2CRoutines.c **** 
  69:Src/Sensor/I2CRoutines.c ****     if (Mode == Polling) /* I2Cx Master Reception using Polling */
  57              		.loc 1 69 0
  58 001c 002B     		cmp	r3, #0
  59 001e 40F01A81 		bne	.L2
  70:Src/Sensor/I2CRoutines.c ****     {
  71:Src/Sensor/I2CRoutines.c ****         if (NumByteToRead == 1)
  60              		.loc 1 71 0
  61 0022 012A     		cmp	r2, #1
  62 0024 4DD1     		bne	.L3
  72:Src/Sensor/I2CRoutines.c ****         {
  73:Src/Sensor/I2CRoutines.c ****             Timeout = 0xFFFF;
  63              		.loc 1 73 0
  64 0026 4FF6FF73 		movw	r3, #65535
  65              	.LVL3:
  66 002a 0093     		str	r3, [sp]
  74:Src/Sensor/I2CRoutines.c ****             /* Send START condition */
  75:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 |= CR1_START_Set;
  67              		.loc 1 75 0
  68 002c 2388     		ldrh	r3, [r4]
  69 002e 9BB2     		uxth	r3, r3
  70 0030 43F48073 		orr	r3, r3, #256
  71 0034 2380     		strh	r3, [r4]	@ movhi
  76:Src/Sensor/I2CRoutines.c ****             /* Wait until SB flag is set: EV5  */
  77:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1&0x0001) != 0x0001)
  72              		.loc 1 77 0
  73 0036 05E0     		b	.L4
  74              	.LVL4:
  75              	.L6:
  78:Src/Sensor/I2CRoutines.c ****             {
  79:Src/Sensor/I2CRoutines.c ****                 if (Timeout-- == 0)
  76              		.loc 1 79 0
  77 0038 009B     		ldr	r3, [sp]
  78 003a 5A1E     		subs	r2, r3, #1
  79 003c 0092     		str	r2, [sp]
  80 003e 002B     		cmp	r3, #0
  81 0040 00F03981 		beq	.L34
  82              	.L4:
  77:Src/Sensor/I2CRoutines.c ****             {
  83              		.loc 1 77 0
  84 0044 A38A     		ldrh	r3, [r4, #20]
  85 0046 13F0010F 		tst	r3, #1
  86 004a F5D0     		beq	.L6
  80:Src/Sensor/I2CRoutines.c ****                     return Error;
  81:Src/Sensor/I2CRoutines.c ****             }
  82:Src/Sensor/I2CRoutines.c ****             /* Send slave address */
  83:Src/Sensor/I2CRoutines.c ****             /* Reset the address bit0 for read */
  84:Src/Sensor/I2CRoutines.c ****             SlaveAddress |= OAR1_ADD0_Set;
  87              		.loc 1 84 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 4


  88 004c 40F00100 		orr	r0, r0, #1
  89              	.LVL5:
  85:Src/Sensor/I2CRoutines.c ****             Address = SlaveAddress;
  90              		.loc 1 85 0
  91 0050 9E4B     		ldr	r3, .L41
  92 0052 1870     		strb	r0, [r3]
  86:Src/Sensor/I2CRoutines.c ****             /* Send the slave address */
  87:Src/Sensor/I2CRoutines.c ****             I2Cx->DR = Address;
  93              		.loc 1 87 0
  94 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  95 0056 2382     		strh	r3, [r4, #16]	@ movhi
  88:Src/Sensor/I2CRoutines.c ****             /* Wait until ADDR is set: EV6_3, then program ACK = 0, clear ADDR
  89:Src/Sensor/I2CRoutines.c ****             and program the STOP just after ADDR is cleared. The EV6_3 
  90:Src/Sensor/I2CRoutines.c ****             software sequence must complete before the current byte end of transfer.*/
  91:Src/Sensor/I2CRoutines.c ****             /* Wait until ADDR is set */
  92:Src/Sensor/I2CRoutines.c ****             Timeout = 0xFFFF;
  96              		.loc 1 92 0
  97 0058 4FF6FF73 		movw	r3, #65535
  98 005c 0093     		str	r3, [sp]
  93:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1&0x0002) != 0x0002)
  99              		.loc 1 93 0
 100 005e 05E0     		b	.L7
 101              	.L8:
  94:Src/Sensor/I2CRoutines.c ****             {
  95:Src/Sensor/I2CRoutines.c ****                 if (Timeout-- == 0)
 102              		.loc 1 95 0
 103 0060 009B     		ldr	r3, [sp]
 104 0062 5A1E     		subs	r2, r3, #1
 105 0064 0092     		str	r2, [sp]
 106 0066 002B     		cmp	r3, #0
 107 0068 00F02781 		beq	.L35
 108              	.L7:
  93:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1&0x0002) != 0x0002)
 109              		.loc 1 93 0
 110 006c A38A     		ldrh	r3, [r4, #20]
 111 006e 03F00203 		and	r3, r3, #2
 112 0072 9BB2     		uxth	r3, r3
 113 0074 002B     		cmp	r3, #0
 114 0076 F3D0     		beq	.L8
  96:Src/Sensor/I2CRoutines.c ****                     return Error;
  97:Src/Sensor/I2CRoutines.c ****             }
  98:Src/Sensor/I2CRoutines.c ****             /* Clear ACK bit */
  99:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 &= CR1_ACK_Reset;
 115              		.loc 1 99 0
 116 0078 2388     		ldrh	r3, [r4]
 117 007a 9BB2     		uxth	r3, r3
 118 007c 23F48063 		bic	r3, r3, #1024
 119 0080 9BB2     		uxth	r3, r3
 120 0082 2380     		strh	r3, [r4]	@ movhi
 121              	.LBB18:
 122              	.LBB19:
 123              		.file 2 "CMSIS/Core/CM3/core_cm3.h"
   1:CMSIS/Core/CM3/core_cm3.h **** /******************************************************************************
   2:CMSIS/Core/CM3/core_cm3.h ****  * @file:    core_cm3.h
   3:CMSIS/Core/CM3/core_cm3.h ****  * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:CMSIS/Core/CM3/core_cm3.h ****  * @version: V1.20
   5:CMSIS/Core/CM3/core_cm3.h ****  * @date:    22. May 2009
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 5


   6:CMSIS/Core/CM3/core_cm3.h ****  *----------------------------------------------------------------------------
   7:CMSIS/Core/CM3/core_cm3.h ****  *
   8:CMSIS/Core/CM3/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:CMSIS/Core/CM3/core_cm3.h ****  *
  10:CMSIS/Core/CM3/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
  11:CMSIS/Core/CM3/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  12:CMSIS/Core/CM3/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  13:CMSIS/Core/CM3/core_cm3.h ****  *
  14:CMSIS/Core/CM3/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  15:CMSIS/Core/CM3/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  16:CMSIS/Core/CM3/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  17:CMSIS/Core/CM3/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  18:CMSIS/Core/CM3/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  19:CMSIS/Core/CM3/core_cm3.h ****  *
  20:CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
  21:CMSIS/Core/CM3/core_cm3.h **** 
  22:CMSIS/Core/CM3/core_cm3.h **** #ifndef __CM3_CORE_H__
  23:CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CORE_H__
  24:CMSIS/Core/CM3/core_cm3.h **** 
  25:CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
  26:CMSIS/Core/CM3/core_cm3.h ****  extern "C" {
  27:CMSIS/Core/CM3/core_cm3.h **** #endif 
  28:CMSIS/Core/CM3/core_cm3.h **** 
  29:CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  30:CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!<
  31:CMSIS/Core/CM3/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  32:CMSIS/Core/CM3/core_cm3.h **** 
  33:CMSIS/Core/CM3/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  34:CMSIS/Core/CM3/core_cm3.h **** 
  35:CMSIS/Core/CM3/core_cm3.h **** /**
  36:CMSIS/Core/CM3/core_cm3.h ****  *  Lint configuration \n
  37:CMSIS/Core/CM3/core_cm3.h ****  *  ----------------------- \n
  38:CMSIS/Core/CM3/core_cm3.h ****  *
  39:CMSIS/Core/CM3/core_cm3.h ****  *  The following Lint messages will be suppressed and not shown: \n
  40:CMSIS/Core/CM3/core_cm3.h ****  *  \n
  41:CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 10: --- \n
  42:CMSIS/Core/CM3/core_cm3.h ****  *    register uint32_t __regBasePri         __asm("basepri"); \n
  43:CMSIS/Core/CM3/core_cm3.h ****  *    Error 10: Expecting ';' \n
  44:CMSIS/Core/CM3/core_cm3.h ****  *     \n
  45:CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 530: --- \n
  46:CMSIS/Core/CM3/core_cm3.h ****  *    return(__regBasePri); \n
  47:CMSIS/Core/CM3/core_cm3.h ****  *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
  48:CMSIS/Core/CM3/core_cm3.h ****  *     \n
  49:CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 550: --- \n
  50:CMSIS/Core/CM3/core_cm3.h ****  *      __regBasePri = (basePri & 0x1ff); \n
  51:CMSIS/Core/CM3/core_cm3.h ****  *    } \n
  52:CMSIS/Core/CM3/core_cm3.h ****  *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
  53:CMSIS/Core/CM3/core_cm3.h ****  *     \n
  54:CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 754: --- \n
  55:CMSIS/Core/CM3/core_cm3.h ****  *    uint32_t RESERVED0[24]; \n
  56:CMSIS/Core/CM3/core_cm3.h ****  *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) 
  57:CMSIS/Core/CM3/core_cm3.h ****  *     \n
  58:CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 750: --- \n
  59:CMSIS/Core/CM3/core_cm3.h ****  *    #define __CM3_CORE_H__ \n
  60:CMSIS/Core/CM3/core_cm3.h ****  *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
  61:CMSIS/Core/CM3/core_cm3.h ****  *     \n
  62:CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 528: --- \n
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 6


  63:CMSIS/Core/CM3/core_cm3.h ****  *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  64:CMSIS/Core/CM3/core_cm3.h ****  *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referen
  65:CMSIS/Core/CM3/core_cm3.h ****  *     \n
  66:CMSIS/Core/CM3/core_cm3.h ****  *    --- Error 751: --- \n
  67:CMSIS/Core/CM3/core_cm3.h ****  *    } InterruptType_Type; \n
  68:CMSIS/Core/CM3/core_cm3.h ****  *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
  69:CMSIS/Core/CM3/core_cm3.h ****  * \n
  70:CMSIS/Core/CM3/core_cm3.h ****  * \n
  71:CMSIS/Core/CM3/core_cm3.h ****  *    Note:  To re-enable a Message, insert a space before 'lint' * \n
  72:CMSIS/Core/CM3/core_cm3.h ****  *
  73:CMSIS/Core/CM3/core_cm3.h ****  */
  74:CMSIS/Core/CM3/core_cm3.h **** 
  75:CMSIS/Core/CM3/core_cm3.h **** /*lint -save */
  76:CMSIS/Core/CM3/core_cm3.h **** /*lint -e10  */
  77:CMSIS/Core/CM3/core_cm3.h **** /*lint -e530 */
  78:CMSIS/Core/CM3/core_cm3.h **** /*lint -e550 */
  79:CMSIS/Core/CM3/core_cm3.h **** /*lint -e754 */
  80:CMSIS/Core/CM3/core_cm3.h **** /*lint -e750 */
  81:CMSIS/Core/CM3/core_cm3.h **** /*lint -e528 */
  82:CMSIS/Core/CM3/core_cm3.h **** /*lint -e751 */
  83:CMSIS/Core/CM3/core_cm3.h **** 
  84:CMSIS/Core/CM3/core_cm3.h **** 
  85:CMSIS/Core/CM3/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  86:CMSIS/Core/CM3/core_cm3.h **** 
  87:CMSIS/Core/CM3/core_cm3.h **** #if defined (__ICCARM__)
  88:CMSIS/Core/CM3/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  89:CMSIS/Core/CM3/core_cm3.h **** #endif
  90:CMSIS/Core/CM3/core_cm3.h **** 
  91:CMSIS/Core/CM3/core_cm3.h **** 
  92:CMSIS/Core/CM3/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  93:CMSIS/Core/CM3/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  94:CMSIS/Core/CM3/core_cm3.h **** #endif
  95:CMSIS/Core/CM3/core_cm3.h **** 
  96:CMSIS/Core/CM3/core_cm3.h **** 
  97:CMSIS/Core/CM3/core_cm3.h **** 
  98:CMSIS/Core/CM3/core_cm3.h **** 
  99:CMSIS/Core/CM3/core_cm3.h **** /**
 100:CMSIS/Core/CM3/core_cm3.h ****  * IO definitions
 101:CMSIS/Core/CM3/core_cm3.h ****  *
 102:CMSIS/Core/CM3/core_cm3.h ****  * define access restrictions to peripheral registers
 103:CMSIS/Core/CM3/core_cm3.h ****  */
 104:CMSIS/Core/CM3/core_cm3.h **** 
 105:CMSIS/Core/CM3/core_cm3.h **** #ifdef __cplusplus
 106:CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile                  /*!< defines 'read only' permissions      */
 107:CMSIS/Core/CM3/core_cm3.h **** #else
 108:CMSIS/Core/CM3/core_cm3.h **** #define     __I     volatile const            /*!< defines 'read only' permissions      */
 109:CMSIS/Core/CM3/core_cm3.h **** #endif
 110:CMSIS/Core/CM3/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 111:CMSIS/Core/CM3/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 112:CMSIS/Core/CM3/core_cm3.h **** 
 113:CMSIS/Core/CM3/core_cm3.h **** 
 114:CMSIS/Core/CM3/core_cm3.h **** 
 115:CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 116:CMSIS/Core/CM3/core_cm3.h ****  *                 Register Abstraction
 117:CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 118:CMSIS/Core/CM3/core_cm3.h **** 
 119:CMSIS/Core/CM3/core_cm3.h **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 7


 120:CMSIS/Core/CM3/core_cm3.h **** /* System Reset */
 121:CMSIS/Core/CM3/core_cm3.h **** #define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
 122:CMSIS/Core/CM3/core_cm3.h **** #define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
 123:CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
 124:CMSIS/Core/CM3/core_cm3.h **** #define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
 125:CMSIS/Core/CM3/core_cm3.h **** 
 126:CMSIS/Core/CM3/core_cm3.h **** /* Core Debug */
 127:CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
 128:CMSIS/Core/CM3/core_cm3.h **** #define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
 129:CMSIS/Core/CM3/core_cm3.h **** 
 130:CMSIS/Core/CM3/core_cm3.h **** 
 131:CMSIS/Core/CM3/core_cm3.h **** 
 132:CMSIS/Core/CM3/core_cm3.h **** 
 133:CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
 134:CMSIS/Core/CM3/core_cm3.h **** typedef struct
 135:CMSIS/Core/CM3/core_cm3.h **** {
 136:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
 137:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[24];
 138:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
 139:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RSERVED1[24];
 140:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
 141:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[24];
 142:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
 143:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[24];
 144:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
 145:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[56];
 146:CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
 147:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[644];
 148:CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
 149:CMSIS/Core/CM3/core_cm3.h **** }  NVIC_Type;
 150:CMSIS/Core/CM3/core_cm3.h **** 
 151:CMSIS/Core/CM3/core_cm3.h **** 
 152:CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for System Control Block */
 153:CMSIS/Core/CM3/core_cm3.h **** typedef struct
 154:CMSIS/Core/CM3/core_cm3.h **** {
 155:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< CPU ID Base Register                            
 156:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                
 157:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                    
 158:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register  
 159:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SCR;                          /*!< System Control Register                         
 160:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Configuration Control Register                  
 161:CMSIS/Core/CM3/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 1
 162:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register       
 163:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register              
 164:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                      
 165:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                     
 166:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                     
 167:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                      
 168:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                 
 169:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Processor Feature Register                      
 170:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Debug Feature Register                          
 171:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                      
 172:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                   
 173:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                            
 174:CMSIS/Core/CM3/core_cm3.h **** } SCB_Type;
 175:CMSIS/Core/CM3/core_cm3.h **** 
 176:CMSIS/Core/CM3/core_cm3.h **** 
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 8


 177:CMSIS/Core/CM3/core_cm3.h **** /* memory mapping struct for SysTick */
 178:CMSIS/Core/CM3/core_cm3.h **** typedef struct
 179:CMSIS/Core/CM3/core_cm3.h **** {
 180:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
 181:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
 182:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
 183:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
 184:CMSIS/Core/CM3/core_cm3.h **** } SysTick_Type;
 185:CMSIS/Core/CM3/core_cm3.h **** 
 186:CMSIS/Core/CM3/core_cm3.h **** 
 187:CMSIS/Core/CM3/core_cm3.h **** /* memory mapping structur for ITM */
 188:CMSIS/Core/CM3/core_cm3.h **** typedef struct
 189:CMSIS/Core/CM3/core_cm3.h **** {
 190:CMSIS/Core/CM3/core_cm3.h ****   __O  union  
 191:CMSIS/Core/CM3/core_cm3.h ****   {
 192:CMSIS/Core/CM3/core_cm3.h ****     __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
 193:CMSIS/Core/CM3/core_cm3.h ****     __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
 194:CMSIS/Core/CM3/core_cm3.h ****     __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
 195:CMSIS/Core/CM3/core_cm3.h ****   }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
 196:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0[864];
 197:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
 198:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1[15];
 199:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
 200:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED2[15];
 201:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
 202:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED3[29];
 203:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
 204:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
 205:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
 206:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED4[43];
 207:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
 208:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
 209:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED5[6];
 210:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
 211:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID5;
 212:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID6;
 213:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID7;
 214:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID0;
 215:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID1;
 216:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID2;
 217:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t PID3;
 218:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID0;
 219:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID1;
 220:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID2;
 221:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t CID3;
 222:CMSIS/Core/CM3/core_cm3.h **** } ITM_Type;
 223:CMSIS/Core/CM3/core_cm3.h **** 
 224:CMSIS/Core/CM3/core_cm3.h **** 
 225:CMSIS/Core/CM3/core_cm3.h **** /* memory mapped struct for Interrupt Type */
 226:CMSIS/Core/CM3/core_cm3.h **** typedef struct
 227:CMSIS/Core/CM3/core_cm3.h **** {
 228:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED0;
 229:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
 230:CMSIS/Core/CM3/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 231:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
 232:CMSIS/Core/CM3/core_cm3.h **** #else
 233:CMSIS/Core/CM3/core_cm3.h ****        uint32_t RESERVED1;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 9


 234:CMSIS/Core/CM3/core_cm3.h **** #endif
 235:CMSIS/Core/CM3/core_cm3.h **** } InterruptType_Type;
 236:CMSIS/Core/CM3/core_cm3.h **** 
 237:CMSIS/Core/CM3/core_cm3.h **** 
 238:CMSIS/Core/CM3/core_cm3.h **** /* Memory Protection Unit */
 239:CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 240:CMSIS/Core/CM3/core_cm3.h **** typedef struct
 241:CMSIS/Core/CM3/core_cm3.h **** {
 242:CMSIS/Core/CM3/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< MPU Type Register                               
 243:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< MPU Control Register                            
 244:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      
 245:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                
 246:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          
 247:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        
 248:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  
 249:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        
 250:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  
 251:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        
 252:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  
 253:CMSIS/Core/CM3/core_cm3.h **** } MPU_Type;
 254:CMSIS/Core/CM3/core_cm3.h **** #endif
 255:CMSIS/Core/CM3/core_cm3.h **** 
 256:CMSIS/Core/CM3/core_cm3.h **** 
 257:CMSIS/Core/CM3/core_cm3.h **** /* Core Debug Register */
 258:CMSIS/Core/CM3/core_cm3.h **** typedef struct
 259:CMSIS/Core/CM3/core_cm3.h **** {
 260:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       
 261:CMSIS/Core/CM3/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           
 262:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               
 263:CMSIS/Core/CM3/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    
 264:CMSIS/Core/CM3/core_cm3.h **** } CoreDebug_Type;
 265:CMSIS/Core/CM3/core_cm3.h **** 
 266:CMSIS/Core/CM3/core_cm3.h **** 
 267:CMSIS/Core/CM3/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 268:CMSIS/Core/CM3/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 269:CMSIS/Core/CM3/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 270:CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 271:CMSIS/Core/CM3/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 272:CMSIS/Core/CM3/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 273:CMSIS/Core/CM3/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 274:CMSIS/Core/CM3/core_cm3.h **** 
 275:CMSIS/Core/CM3/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 276:CMSIS/Core/CM3/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 277:CMSIS/Core/CM3/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 278:CMSIS/Core/CM3/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 279:CMSIS/Core/CM3/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 280:CMSIS/Core/CM3/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 281:CMSIS/Core/CM3/core_cm3.h **** 
 282:CMSIS/Core/CM3/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 283:CMSIS/Core/CM3/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 284:CMSIS/Core/CM3/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 285:CMSIS/Core/CM3/core_cm3.h **** #endif
 286:CMSIS/Core/CM3/core_cm3.h **** 
 287:CMSIS/Core/CM3/core_cm3.h **** 
 288:CMSIS/Core/CM3/core_cm3.h **** 
 289:CMSIS/Core/CM3/core_cm3.h **** /*******************************************************************************
 290:CMSIS/Core/CM3/core_cm3.h ****  *                Hardware Abstraction Layer
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 10


 291:CMSIS/Core/CM3/core_cm3.h ****  ******************************************************************************/
 292:CMSIS/Core/CM3/core_cm3.h **** 
 293:CMSIS/Core/CM3/core_cm3.h **** 
 294:CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   )
 295:CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 296:CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 297:CMSIS/Core/CM3/core_cm3.h **** 
 298:CMSIS/Core/CM3/core_cm3.h **** #elif defined ( __ICCARM__ )
 299:CMSIS/Core/CM3/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 300:CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 301:CMSIS/Core/CM3/core_cm3.h **** 
 302:CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __GNUC__  )
 303:CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 304:CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 305:CMSIS/Core/CM3/core_cm3.h **** 
 306:CMSIS/Core/CM3/core_cm3.h **** #elif defined   (  __TASKING__  )
 307:CMSIS/Core/CM3/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 308:CMSIS/Core/CM3/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 309:CMSIS/Core/CM3/core_cm3.h **** 
 310:CMSIS/Core/CM3/core_cm3.h **** #endif
 311:CMSIS/Core/CM3/core_cm3.h **** 
 312:CMSIS/Core/CM3/core_cm3.h **** 
 313:CMSIS/Core/CM3/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 314:CMSIS/Core/CM3/core_cm3.h **** 
 315:CMSIS/Core/CM3/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 316:CMSIS/Core/CM3/core_cm3.h **** /* ARM armcc specific functions */
 317:CMSIS/Core/CM3/core_cm3.h **** 
 318:CMSIS/Core/CM3/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 319:CMSIS/Core/CM3/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 320:CMSIS/Core/CM3/core_cm3.h **** 
 321:CMSIS/Core/CM3/core_cm3.h **** #define __NOP                             __nop
 322:CMSIS/Core/CM3/core_cm3.h **** #define __WFI                             __wfi
 323:CMSIS/Core/CM3/core_cm3.h **** #define __WFE                             __wfe
 324:CMSIS/Core/CM3/core_cm3.h **** #define __SEV                             __sev
 325:CMSIS/Core/CM3/core_cm3.h **** #define __ISB()                           __isb(0)
 326:CMSIS/Core/CM3/core_cm3.h **** #define __DSB()                           __dsb(0)
 327:CMSIS/Core/CM3/core_cm3.h **** #define __DMB()                           __dmb(0)
 328:CMSIS/Core/CM3/core_cm3.h **** #define __REV                             __rev
 329:CMSIS/Core/CM3/core_cm3.h **** #define __RBIT                            __rbit
 330:CMSIS/Core/CM3/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 331:CMSIS/Core/CM3/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 332:CMSIS/Core/CM3/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 333:CMSIS/Core/CM3/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 334:CMSIS/Core/CM3/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 335:CMSIS/Core/CM3/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 336:CMSIS/Core/CM3/core_cm3.h **** 
 337:CMSIS/Core/CM3/core_cm3.h **** 
 338:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 339:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 340:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __enable_irq();     */
 341:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __disable_irq();    */
 342:CMSIS/Core/CM3/core_cm3.h **** 
 343:CMSIS/Core/CM3/core_cm3.h **** 
 344:CMSIS/Core/CM3/core_cm3.h **** /**
 345:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 346:CMSIS/Core/CM3/core_cm3.h ****  *
 347:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 11


 348:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 349:CMSIS/Core/CM3/core_cm3.h ****  *
 350:CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 351:CMSIS/Core/CM3/core_cm3.h ****  */
 352:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 353:CMSIS/Core/CM3/core_cm3.h **** 
 354:CMSIS/Core/CM3/core_cm3.h **** /**
 355:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 356:CMSIS/Core/CM3/core_cm3.h ****  *
 357:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 358:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 359:CMSIS/Core/CM3/core_cm3.h ****  *
 360:CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 361:CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 362:CMSIS/Core/CM3/core_cm3.h ****  */
 363:CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 364:CMSIS/Core/CM3/core_cm3.h **** 
 365:CMSIS/Core/CM3/core_cm3.h **** /**
 366:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 367:CMSIS/Core/CM3/core_cm3.h ****  *
 368:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 369:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 370:CMSIS/Core/CM3/core_cm3.h ****  *
 371:CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 372:CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 373:CMSIS/Core/CM3/core_cm3.h ****  */
 374:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
 375:CMSIS/Core/CM3/core_cm3.h **** 
 376:CMSIS/Core/CM3/core_cm3.h **** /**
 377:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 378:CMSIS/Core/CM3/core_cm3.h ****  *
 379:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 380:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 381:CMSIS/Core/CM3/core_cm3.h ****  *
 382:CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 383:CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 384:CMSIS/Core/CM3/core_cm3.h ****  */
 385:CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 386:CMSIS/Core/CM3/core_cm3.h **** 
 387:CMSIS/Core/CM3/core_cm3.h **** /**
 388:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 389:CMSIS/Core/CM3/core_cm3.h ****  *
 390:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 391:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 392:CMSIS/Core/CM3/core_cm3.h ****  *
 393:CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 394:CMSIS/Core/CM3/core_cm3.h ****  */
 395:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 396:CMSIS/Core/CM3/core_cm3.h **** 
 397:CMSIS/Core/CM3/core_cm3.h **** /*
 398:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 399:CMSIS/Core/CM3/core_cm3.h ****  *
 400:CMSIS/Core/CM3/core_cm3.h ****  * @param  int16_t value to reverse
 401:CMSIS/Core/CM3/core_cm3.h ****  * @return int32_t reversed value
 402:CMSIS/Core/CM3/core_cm3.h ****  *
 403:CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 404:CMSIS/Core/CM3/core_cm3.h ****  */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 12


 405:CMSIS/Core/CM3/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 406:CMSIS/Core/CM3/core_cm3.h **** 
 407:CMSIS/Core/CM3/core_cm3.h **** 
 408:CMSIS/Core/CM3/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 409:CMSIS/Core/CM3/core_cm3.h **** 
 410:CMSIS/Core/CM3/core_cm3.h **** /**
 411:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 412:CMSIS/Core/CM3/core_cm3.h ****  *
 413:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 414:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 415:CMSIS/Core/CM3/core_cm3.h ****  *
 416:CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 417:CMSIS/Core/CM3/core_cm3.h ****  */
 418:CMSIS/Core/CM3/core_cm3.h **** extern void __CLREX(void);
 419:CMSIS/Core/CM3/core_cm3.h **** 
 420:CMSIS/Core/CM3/core_cm3.h **** /**
 421:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 422:CMSIS/Core/CM3/core_cm3.h ****  *
 423:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 424:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
 425:CMSIS/Core/CM3/core_cm3.h ****  *
 426:CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 427:CMSIS/Core/CM3/core_cm3.h ****  */
 428:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 429:CMSIS/Core/CM3/core_cm3.h **** 
 430:CMSIS/Core/CM3/core_cm3.h **** /**
 431:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 432:CMSIS/Core/CM3/core_cm3.h ****  *
 433:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 434:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 435:CMSIS/Core/CM3/core_cm3.h ****  *
 436:CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 437:CMSIS/Core/CM3/core_cm3.h ****  */
 438:CMSIS/Core/CM3/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 439:CMSIS/Core/CM3/core_cm3.h **** 
 440:CMSIS/Core/CM3/core_cm3.h **** /**
 441:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 442:CMSIS/Core/CM3/core_cm3.h ****  *
 443:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 444:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 445:CMSIS/Core/CM3/core_cm3.h ****  *
 446:CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 447:CMSIS/Core/CM3/core_cm3.h ****  * register
 448:CMSIS/Core/CM3/core_cm3.h ****  */
 449:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 450:CMSIS/Core/CM3/core_cm3.h **** 
 451:CMSIS/Core/CM3/core_cm3.h **** /**
 452:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 453:CMSIS/Core/CM3/core_cm3.h ****  *
 454:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 455:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 456:CMSIS/Core/CM3/core_cm3.h ****  *
 457:CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 458:CMSIS/Core/CM3/core_cm3.h ****  */
 459:CMSIS/Core/CM3/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 460:CMSIS/Core/CM3/core_cm3.h **** 
 461:CMSIS/Core/CM3/core_cm3.h **** /**
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 13


 462:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 463:CMSIS/Core/CM3/core_cm3.h ****  *
 464:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 465:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
 466:CMSIS/Core/CM3/core_cm3.h ****  *
 467:CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 468:CMSIS/Core/CM3/core_cm3.h ****  */
 469:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 470:CMSIS/Core/CM3/core_cm3.h **** 
 471:CMSIS/Core/CM3/core_cm3.h **** /**
 472:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 473:CMSIS/Core/CM3/core_cm3.h ****  *
 474:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 475:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 476:CMSIS/Core/CM3/core_cm3.h ****  *
 477:CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 478:CMSIS/Core/CM3/core_cm3.h ****  */
 479:CMSIS/Core/CM3/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 480:CMSIS/Core/CM3/core_cm3.h **** 
 481:CMSIS/Core/CM3/core_cm3.h **** /**
 482:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 483:CMSIS/Core/CM3/core_cm3.h ****  * 
 484:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 485:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 486:CMSIS/Core/CM3/core_cm3.h ****  *
 487:CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 488:CMSIS/Core/CM3/core_cm3.h ****  */
 489:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 490:CMSIS/Core/CM3/core_cm3.h **** 
 491:CMSIS/Core/CM3/core_cm3.h **** /**
 492:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 493:CMSIS/Core/CM3/core_cm3.h ****  *
 494:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 495:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 496:CMSIS/Core/CM3/core_cm3.h ****  *
 497:CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 498:CMSIS/Core/CM3/core_cm3.h ****  */
 499:CMSIS/Core/CM3/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 500:CMSIS/Core/CM3/core_cm3.h **** 
 501:CMSIS/Core/CM3/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 502:CMSIS/Core/CM3/core_cm3.h **** 
 503:CMSIS/Core/CM3/core_cm3.h **** 
 504:CMSIS/Core/CM3/core_cm3.h **** /**
 505:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 506:CMSIS/Core/CM3/core_cm3.h ****  *
 507:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 508:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 509:CMSIS/Core/CM3/core_cm3.h ****  *
 510:CMSIS/Core/CM3/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 511:CMSIS/Core/CM3/core_cm3.h ****  */
 512:CMSIS/Core/CM3/core_cm3.h **** #define __CLREX                           __clrex
 513:CMSIS/Core/CM3/core_cm3.h **** 
 514:CMSIS/Core/CM3/core_cm3.h **** /**
 515:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Base Priority value
 516:CMSIS/Core/CM3/core_cm3.h ****  *
 517:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 518:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t BasePriority
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 14


 519:CMSIS/Core/CM3/core_cm3.h ****  *
 520:CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the base priority register
 521:CMSIS/Core/CM3/core_cm3.h ****  */
 522:CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 523:CMSIS/Core/CM3/core_cm3.h **** {
 524:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 525:CMSIS/Core/CM3/core_cm3.h ****   return(__regBasePri);
 526:CMSIS/Core/CM3/core_cm3.h **** }
 527:CMSIS/Core/CM3/core_cm3.h **** 
 528:CMSIS/Core/CM3/core_cm3.h **** /**
 529:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Base Priority value
 530:CMSIS/Core/CM3/core_cm3.h ****  *
 531:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t BasePriority
 532:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 533:CMSIS/Core/CM3/core_cm3.h ****  *
 534:CMSIS/Core/CM3/core_cm3.h ****  * Set the base priority register
 535:CMSIS/Core/CM3/core_cm3.h ****  */
 536:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 537:CMSIS/Core/CM3/core_cm3.h **** {
 538:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 539:CMSIS/Core/CM3/core_cm3.h ****   __regBasePri = (basePri & 0x1ff);
 540:CMSIS/Core/CM3/core_cm3.h **** }
 541:CMSIS/Core/CM3/core_cm3.h **** 
 542:CMSIS/Core/CM3/core_cm3.h **** /**
 543:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Priority Mask value
 544:CMSIS/Core/CM3/core_cm3.h ****  *
 545:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 546:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t PriMask
 547:CMSIS/Core/CM3/core_cm3.h ****  *
 548:CMSIS/Core/CM3/core_cm3.h ****  * Return the state of the priority mask bit from the priority mask
 549:CMSIS/Core/CM3/core_cm3.h ****  * register
 550:CMSIS/Core/CM3/core_cm3.h ****  */
 551:CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 552:CMSIS/Core/CM3/core_cm3.h **** {
 553:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 554:CMSIS/Core/CM3/core_cm3.h ****   return(__regPriMask);
 555:CMSIS/Core/CM3/core_cm3.h **** }
 556:CMSIS/Core/CM3/core_cm3.h **** 
 557:CMSIS/Core/CM3/core_cm3.h **** /**
 558:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Priority Mask value
 559:CMSIS/Core/CM3/core_cm3.h ****  *
 560:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t PriMask
 561:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 562:CMSIS/Core/CM3/core_cm3.h ****  *
 563:CMSIS/Core/CM3/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 564:CMSIS/Core/CM3/core_cm3.h ****  */
 565:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 566:CMSIS/Core/CM3/core_cm3.h **** {
 567:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 568:CMSIS/Core/CM3/core_cm3.h ****   __regPriMask = (priMask);
 569:CMSIS/Core/CM3/core_cm3.h **** }
 570:CMSIS/Core/CM3/core_cm3.h **** 
 571:CMSIS/Core/CM3/core_cm3.h **** /**
 572:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Fault Mask value
 573:CMSIS/Core/CM3/core_cm3.h ****  *
 574:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 575:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t FaultMask
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 15


 576:CMSIS/Core/CM3/core_cm3.h ****  *
 577:CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the fault mask register
 578:CMSIS/Core/CM3/core_cm3.h ****  */
 579:CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 580:CMSIS/Core/CM3/core_cm3.h **** {
 581:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 582:CMSIS/Core/CM3/core_cm3.h ****   return(__regFaultMask);
 583:CMSIS/Core/CM3/core_cm3.h **** }
 584:CMSIS/Core/CM3/core_cm3.h **** 
 585:CMSIS/Core/CM3/core_cm3.h **** /**
 586:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Fault Mask value
 587:CMSIS/Core/CM3/core_cm3.h ****  *
 588:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t faultMask value
 589:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 590:CMSIS/Core/CM3/core_cm3.h ****  *
 591:CMSIS/Core/CM3/core_cm3.h ****  * Set the fault mask register
 592:CMSIS/Core/CM3/core_cm3.h ****  */
 593:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 594:CMSIS/Core/CM3/core_cm3.h **** {
 595:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 596:CMSIS/Core/CM3/core_cm3.h ****   __regFaultMask = (faultMask & 1);
 597:CMSIS/Core/CM3/core_cm3.h **** }
 598:CMSIS/Core/CM3/core_cm3.h **** 
 599:CMSIS/Core/CM3/core_cm3.h **** /**
 600:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Control Register value
 601:CMSIS/Core/CM3/core_cm3.h ****  * 
 602:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 603:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Control value
 604:CMSIS/Core/CM3/core_cm3.h ****  *
 605:CMSIS/Core/CM3/core_cm3.h ****  * Return the content of the control register
 606:CMSIS/Core/CM3/core_cm3.h ****  */
 607:CMSIS/Core/CM3/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
 608:CMSIS/Core/CM3/core_cm3.h **** {
 609:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 610:CMSIS/Core/CM3/core_cm3.h ****   return(__regControl);
 611:CMSIS/Core/CM3/core_cm3.h **** }
 612:CMSIS/Core/CM3/core_cm3.h **** 
 613:CMSIS/Core/CM3/core_cm3.h **** /**
 614:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Control Register value
 615:CMSIS/Core/CM3/core_cm3.h ****  *
 616:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Control value
 617:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 618:CMSIS/Core/CM3/core_cm3.h ****  *
 619:CMSIS/Core/CM3/core_cm3.h ****  * Set the control register
 620:CMSIS/Core/CM3/core_cm3.h ****  */
 621:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
 622:CMSIS/Core/CM3/core_cm3.h **** {
 623:CMSIS/Core/CM3/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
 624:CMSIS/Core/CM3/core_cm3.h ****   __regControl = control;
 625:CMSIS/Core/CM3/core_cm3.h **** }
 626:CMSIS/Core/CM3/core_cm3.h **** 
 627:CMSIS/Core/CM3/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
 628:CMSIS/Core/CM3/core_cm3.h **** 
 629:CMSIS/Core/CM3/core_cm3.h **** 
 630:CMSIS/Core/CM3/core_cm3.h **** 
 631:CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 632:CMSIS/Core/CM3/core_cm3.h **** /* IAR iccarm specific functions */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 16


 633:CMSIS/Core/CM3/core_cm3.h **** 
 634:CMSIS/Core/CM3/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 635:CMSIS/Core/CM3/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 636:CMSIS/Core/CM3/core_cm3.h **** 
 637:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 638:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 639:CMSIS/Core/CM3/core_cm3.h **** 
 640:CMSIS/Core/CM3/core_cm3.h **** #define __NOP                                     __no_operation()          /*!< no operation intri
 641:CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 642:CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 643:CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 644:CMSIS/Core/CM3/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
 645:CMSIS/Core/CM3/core_cm3.h **** 
 646:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
 647:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
 648:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
 649:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
 650:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
 651:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
 652:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
 653:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 654:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 655:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
 656:CMSIS/Core/CM3/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
 657:CMSIS/Core/CM3/core_cm3.h **** 
 658:CMSIS/Core/CM3/core_cm3.h **** 
 659:CMSIS/Core/CM3/core_cm3.h **** /**
 660:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 661:CMSIS/Core/CM3/core_cm3.h ****  *
 662:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 663:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t ProcessStackPointer
 664:CMSIS/Core/CM3/core_cm3.h ****  *
 665:CMSIS/Core/CM3/core_cm3.h ****  * Return the actual process stack pointer
 666:CMSIS/Core/CM3/core_cm3.h ****  */
 667:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_PSP(void);
 668:CMSIS/Core/CM3/core_cm3.h **** 
 669:CMSIS/Core/CM3/core_cm3.h **** /**
 670:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 671:CMSIS/Core/CM3/core_cm3.h ****  *
 672:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Process Stack Pointer
 673:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 674:CMSIS/Core/CM3/core_cm3.h ****  *
 675:CMSIS/Core/CM3/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 676:CMSIS/Core/CM3/core_cm3.h ****  * (process stack pointer) Cortex processor register
 677:CMSIS/Core/CM3/core_cm3.h ****  */
 678:CMSIS/Core/CM3/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 679:CMSIS/Core/CM3/core_cm3.h **** 
 680:CMSIS/Core/CM3/core_cm3.h **** /**
 681:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 682:CMSIS/Core/CM3/core_cm3.h ****  *
 683:CMSIS/Core/CM3/core_cm3.h ****  * @param  none
 684:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t Main Stack Pointer
 685:CMSIS/Core/CM3/core_cm3.h ****  *
 686:CMSIS/Core/CM3/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 687:CMSIS/Core/CM3/core_cm3.h ****  * Cortex processor register
 688:CMSIS/Core/CM3/core_cm3.h ****  */
 689:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __get_MSP(void);
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 17


 690:CMSIS/Core/CM3/core_cm3.h **** 
 691:CMSIS/Core/CM3/core_cm3.h **** /**
 692:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 693:CMSIS/Core/CM3/core_cm3.h ****  *
 694:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t Main Stack Pointer
 695:CMSIS/Core/CM3/core_cm3.h ****  * @return none
 696:CMSIS/Core/CM3/core_cm3.h ****  *
 697:CMSIS/Core/CM3/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 698:CMSIS/Core/CM3/core_cm3.h ****  * (main stack pointer) Cortex processor register
 699:CMSIS/Core/CM3/core_cm3.h ****  */
 700:CMSIS/Core/CM3/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 701:CMSIS/Core/CM3/core_cm3.h **** 
 702:CMSIS/Core/CM3/core_cm3.h **** /**
 703:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 704:CMSIS/Core/CM3/core_cm3.h ****  *
 705:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to reverse
 706:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 707:CMSIS/Core/CM3/core_cm3.h ****  *
 708:CMSIS/Core/CM3/core_cm3.h ****  * Reverse byte order in unsigned short value
 709:CMSIS/Core/CM3/core_cm3.h ****  */
 710:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 711:CMSIS/Core/CM3/core_cm3.h **** 
 712:CMSIS/Core/CM3/core_cm3.h **** /**
 713:CMSIS/Core/CM3/core_cm3.h ****  * @brief  Reverse bit order of value
 714:CMSIS/Core/CM3/core_cm3.h ****  *
 715:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to reverse
 716:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t reversed value
 717:CMSIS/Core/CM3/core_cm3.h ****  *
 718:CMSIS/Core/CM3/core_cm3.h ****  * Reverse bit order of value
 719:CMSIS/Core/CM3/core_cm3.h ****  */
 720:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
 721:CMSIS/Core/CM3/core_cm3.h **** 
 722:CMSIS/Core/CM3/core_cm3.h **** /**
 723:CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 724:CMSIS/Core/CM3/core_cm3.h ****  *
 725:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t* address
 726:CMSIS/Core/CM3/core_cm3.h ****  * @return uint8_t value of (*address)
 727:CMSIS/Core/CM3/core_cm3.h ****  *
 728:CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 729:CMSIS/Core/CM3/core_cm3.h ****  */
 730:CMSIS/Core/CM3/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
 731:CMSIS/Core/CM3/core_cm3.h **** 
 732:CMSIS/Core/CM3/core_cm3.h **** /**
 733:CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 734:CMSIS/Core/CM3/core_cm3.h ****  *
 735:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t* address
 736:CMSIS/Core/CM3/core_cm3.h ****  * @return uint16_t value of (*address)
 737:CMSIS/Core/CM3/core_cm3.h ****  *
 738:CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 739:CMSIS/Core/CM3/core_cm3.h ****  */
 740:CMSIS/Core/CM3/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
 741:CMSIS/Core/CM3/core_cm3.h **** 
 742:CMSIS/Core/CM3/core_cm3.h **** /**
 743:CMSIS/Core/CM3/core_cm3.h ****  * @brief  LDR Exclusive
 744:CMSIS/Core/CM3/core_cm3.h ****  *
 745:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t* address
 746:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t value of (*address)
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 18


 747:CMSIS/Core/CM3/core_cm3.h ****  *
 748:CMSIS/Core/CM3/core_cm3.h ****  * Exclusive LDR command
 749:CMSIS/Core/CM3/core_cm3.h ****  */
 750:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
 751:CMSIS/Core/CM3/core_cm3.h **** 
 752:CMSIS/Core/CM3/core_cm3.h **** /**
 753:CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 754:CMSIS/Core/CM3/core_cm3.h ****  *
 755:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t *address
 756:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint8_t value to store
 757:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 758:CMSIS/Core/CM3/core_cm3.h ****  *
 759:CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 760:CMSIS/Core/CM3/core_cm3.h ****  */
 761:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
 762:CMSIS/Core/CM3/core_cm3.h **** 
 763:CMSIS/Core/CM3/core_cm3.h **** /**
 764:CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 765:CMSIS/Core/CM3/core_cm3.h ****  *
 766:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t *address
 767:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint16_t value to store
 768:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 769:CMSIS/Core/CM3/core_cm3.h ****  *
 770:CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 771:CMSIS/Core/CM3/core_cm3.h ****  */
 772:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
 773:CMSIS/Core/CM3/core_cm3.h **** 
 774:CMSIS/Core/CM3/core_cm3.h **** /**
 775:CMSIS/Core/CM3/core_cm3.h ****  * @brief  STR Exclusive
 776:CMSIS/Core/CM3/core_cm3.h ****  *
 777:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t *address
 778:CMSIS/Core/CM3/core_cm3.h ****  * @param  uint32_t value to store
 779:CMSIS/Core/CM3/core_cm3.h ****  * @return uint32_t successful / failed
 780:CMSIS/Core/CM3/core_cm3.h ****  *
 781:CMSIS/Core/CM3/core_cm3.h ****  * Exclusive STR command
 782:CMSIS/Core/CM3/core_cm3.h ****  */
 783:CMSIS/Core/CM3/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
 784:CMSIS/Core/CM3/core_cm3.h **** 
 785:CMSIS/Core/CM3/core_cm3.h **** 
 786:CMSIS/Core/CM3/core_cm3.h **** 
 787:CMSIS/Core/CM3/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 788:CMSIS/Core/CM3/core_cm3.h **** /* GNU gcc specific functions */
 789:CMSIS/Core/CM3/core_cm3.h **** 
 790:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 791:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 124              		.loc 2 791 0
 125              		.syntax unified
 126              	@ 791 "CMSIS/Core/CM3/core_cm3.h" 1
 127 0084 72B6     		cpsid i
 128              	@ 0 "" 2
 129              		.thumb
 130              		.syntax unified
 131              	.LBE19:
 132              	.LBE18:
 100:Src/Sensor/I2CRoutines.c ****             /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
 101:Src/Sensor/I2CRoutines.c ****             software sequence must complete before the current byte end of transfer */
 102:Src/Sensor/I2CRoutines.c ****             __disable_irq();
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 19


 103:Src/Sensor/I2CRoutines.c ****             /* Clear ADDR flag */
 104:Src/Sensor/I2CRoutines.c ****             temp = I2Cx->SR2;
 133              		.loc 1 104 0
 134 0086 238B     		ldrh	r3, [r4, #24]
 135 0088 9BB2     		uxth	r3, r3
 136 008a 0193     		str	r3, [sp, #4]
 105:Src/Sensor/I2CRoutines.c ****             /* Program the STOP */
 106:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 |= CR1_STOP_Set;
 137              		.loc 1 106 0
 138 008c 2388     		ldrh	r3, [r4]
 139 008e 9BB2     		uxth	r3, r3
 140 0090 43F40073 		orr	r3, r3, #512
 141 0094 2380     		strh	r3, [r4]	@ movhi
 142              	.LBB20:
 143              	.LBB21:
 790:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 144              		.loc 2 790 0
 145              		.syntax unified
 146              	@ 790 "CMSIS/Core/CM3/core_cm3.h" 1
 147 0096 62B6     		cpsie i
 148              	@ 0 "" 2
 149              		.thumb
 150              		.syntax unified
 151              	.L9:
 152              	.LBE21:
 153              	.LBE20:
 107:Src/Sensor/I2CRoutines.c ****             /* Re-enable IRQs */
 108:Src/Sensor/I2CRoutines.c ****             __enable_irq();
 109:Src/Sensor/I2CRoutines.c ****             /* Wait until a data is received in DR register (RXNE = 1) EV7 */
 110:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1 & 0x00040) != 0x000040);
 154              		.loc 1 110 0 discriminator 1
 155 0098 A38A     		ldrh	r3, [r4, #20]
 156 009a 03F04003 		and	r3, r3, #64
 157 009e 9BB2     		uxth	r3, r3
 158 00a0 002B     		cmp	r3, #0
 159 00a2 F9D0     		beq	.L9
 111:Src/Sensor/I2CRoutines.c ****             /* Read the data */
 112:Src/Sensor/I2CRoutines.c ****             *pBuffer = I2Cx->DR;
 160              		.loc 1 112 0
 161 00a4 238A     		ldrh	r3, [r4, #16]
 162 00a6 2B70     		strb	r3, [r5]
 163              	.L10:
 113:Src/Sensor/I2CRoutines.c ****             /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
 114:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->CR1&0x200) == 0x200);
 164              		.loc 1 114 0 discriminator 1
 165 00a8 2388     		ldrh	r3, [r4]
 166 00aa 03F40073 		and	r3, r3, #512
 167 00ae 9BB2     		uxth	r3, r3
 168 00b0 002B     		cmp	r3, #0
 169 00b2 F9D1     		bne	.L10
 115:Src/Sensor/I2CRoutines.c ****             /* Enable Acknowledgement to be ready for another reception */
 116:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 |= CR1_ACK_Set;
 170              		.loc 1 116 0
 171 00b4 2388     		ldrh	r3, [r4]
 172 00b6 9BB2     		uxth	r3, r3
 173 00b8 43F48063 		orr	r3, r3, #1024
 174 00bc 2380     		strh	r3, [r4]	@ movhi
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 20


 117:Src/Sensor/I2CRoutines.c **** 
 118:Src/Sensor/I2CRoutines.c ****         }
 119:Src/Sensor/I2CRoutines.c **** 
 120:Src/Sensor/I2CRoutines.c ****         else if (NumByteToRead == 2)
 121:Src/Sensor/I2CRoutines.c ****         {
 122:Src/Sensor/I2CRoutines.c ****             /* Set POS bit */
 123:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 |= CR1_POS_Set;
 124:Src/Sensor/I2CRoutines.c ****             Timeout = 0xFFFF;
 125:Src/Sensor/I2CRoutines.c ****             /* Send START condition */
 126:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 |= CR1_START_Set;
 127:Src/Sensor/I2CRoutines.c ****             /* Wait until SB flag is set: EV5 */
 128:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1&0x0001) != 0x0001)
 129:Src/Sensor/I2CRoutines.c ****             {
 130:Src/Sensor/I2CRoutines.c ****                 if (Timeout-- == 0)
 131:Src/Sensor/I2CRoutines.c ****                     return Error;
 132:Src/Sensor/I2CRoutines.c ****             }
 133:Src/Sensor/I2CRoutines.c ****             Timeout = 0xFFFF;
 134:Src/Sensor/I2CRoutines.c ****             /* Send slave address */
 135:Src/Sensor/I2CRoutines.c ****             /* Set the address bit0 for read */
 136:Src/Sensor/I2CRoutines.c ****             SlaveAddress |= OAR1_ADD0_Set;
 137:Src/Sensor/I2CRoutines.c ****             Address = SlaveAddress;
 138:Src/Sensor/I2CRoutines.c ****             /* Send the slave address */
 139:Src/Sensor/I2CRoutines.c ****             I2Cx->DR = Address;
 140:Src/Sensor/I2CRoutines.c ****             /* Wait until ADDR is set: EV6 */
 141:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1&0x0002) != 0x0002)
 142:Src/Sensor/I2CRoutines.c ****             {
 143:Src/Sensor/I2CRoutines.c ****                 if (Timeout-- == 0)
 144:Src/Sensor/I2CRoutines.c ****                     return Error;
 145:Src/Sensor/I2CRoutines.c ****             }
 146:Src/Sensor/I2CRoutines.c ****             /* EV6_1: The acknowledge disable should be done just after EV6,
 147:Src/Sensor/I2CRoutines.c ****             that is after ADDR is cleared, so disable all active IRQs around ADDR clearing and 
 148:Src/Sensor/I2CRoutines.c ****             ACK clearing */
 149:Src/Sensor/I2CRoutines.c ****             __disable_irq();
 150:Src/Sensor/I2CRoutines.c ****             /* Clear ADDR by reading SR2 register  */
 151:Src/Sensor/I2CRoutines.c ****             temp = I2Cx->SR2;
 152:Src/Sensor/I2CRoutines.c ****             /* Clear ACK */
 153:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 &= CR1_ACK_Reset;
 154:Src/Sensor/I2CRoutines.c ****             /*Re-enable IRQs */
 155:Src/Sensor/I2CRoutines.c ****             __enable_irq();
 156:Src/Sensor/I2CRoutines.c ****             /* Wait until BTF is set */
 157:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1 & 0x00004) != 0x000004);
 158:Src/Sensor/I2CRoutines.c ****             /* Disable IRQs around STOP programming and data reading because of the limitation ?*/
 159:Src/Sensor/I2CRoutines.c ****             __disable_irq();
 160:Src/Sensor/I2CRoutines.c ****             /* Program the STOP */
 161:Src/Sensor/I2CRoutines.c ****             I2C_GenerateSTOP(I2Cx, ENABLE);
 162:Src/Sensor/I2CRoutines.c ****             /* Read first data */
 163:Src/Sensor/I2CRoutines.c ****             *pBuffer = I2Cx->DR;
 164:Src/Sensor/I2CRoutines.c ****             /* Re-enable IRQs */
 165:Src/Sensor/I2CRoutines.c ****             __enable_irq();
 166:Src/Sensor/I2CRoutines.c ****             /**/
 167:Src/Sensor/I2CRoutines.c ****             pBuffer++;
 168:Src/Sensor/I2CRoutines.c ****             /* Read second data */
 169:Src/Sensor/I2CRoutines.c ****             *pBuffer = I2Cx->DR;
 170:Src/Sensor/I2CRoutines.c ****             /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
 171:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->CR1&0x200) == 0x200);
 172:Src/Sensor/I2CRoutines.c ****             /* Enable Acknowledgement to be ready for another reception */
 173:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1  |= CR1_ACK_Set;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 21


 174:Src/Sensor/I2CRoutines.c ****             /* Clear POS bit */
 175:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1  &= CR1_POS_Reset;
 176:Src/Sensor/I2CRoutines.c **** 
 177:Src/Sensor/I2CRoutines.c ****         }
 178:Src/Sensor/I2CRoutines.c ****         else
 179:Src/Sensor/I2CRoutines.c ****         {
 180:Src/Sensor/I2CRoutines.c ****             Timeout = 0xFFFF;
 181:Src/Sensor/I2CRoutines.c ****             /* Send START condition */
 182:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 |= CR1_START_Set;
 183:Src/Sensor/I2CRoutines.c ****             /* Wait until SB flag is set: EV5 */
 184:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1&0x0001) != 0x0001)
 185:Src/Sensor/I2CRoutines.c ****             {
 186:Src/Sensor/I2CRoutines.c ****                 if (Timeout-- == 0)
 187:Src/Sensor/I2CRoutines.c ****                     return Error;
 188:Src/Sensor/I2CRoutines.c ****             }
 189:Src/Sensor/I2CRoutines.c ****             Timeout = 0xFFFF;
 190:Src/Sensor/I2CRoutines.c ****             /* Send slave address */
 191:Src/Sensor/I2CRoutines.c ****             /* Reset the address bit0 for write */
 192:Src/Sensor/I2CRoutines.c ****             SlaveAddress |= OAR1_ADD0_Set;;
 193:Src/Sensor/I2CRoutines.c ****             Address = SlaveAddress;
 194:Src/Sensor/I2CRoutines.c ****             /* Send the slave address */
 195:Src/Sensor/I2CRoutines.c ****             I2Cx->DR = Address;
 196:Src/Sensor/I2CRoutines.c ****             /* Wait until ADDR is set: EV6 */
 197:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1&0x0002) != 0x0002)
 198:Src/Sensor/I2CRoutines.c ****             {
 199:Src/Sensor/I2CRoutines.c ****                 if (Timeout-- == 0)
 200:Src/Sensor/I2CRoutines.c ****                     return Error;
 201:Src/Sensor/I2CRoutines.c ****             }
 202:Src/Sensor/I2CRoutines.c ****             /* Clear ADDR by reading SR2 status register */
 203:Src/Sensor/I2CRoutines.c ****             temp = I2Cx->SR2;
 204:Src/Sensor/I2CRoutines.c ****             /* While there is data to be read */
 205:Src/Sensor/I2CRoutines.c ****             while (NumByteToRead)
 206:Src/Sensor/I2CRoutines.c ****             {
 207:Src/Sensor/I2CRoutines.c ****                 /* Receive bytes from first byte until byte N-3 */
 208:Src/Sensor/I2CRoutines.c ****                 if (NumByteToRead != 3)
 209:Src/Sensor/I2CRoutines.c ****                 {
 210:Src/Sensor/I2CRoutines.c ****                     /* Poll on BTF to receive data because in polling mode we can not guarantee the
 211:Src/Sensor/I2CRoutines.c ****                     EV7 software sequence is managed before the current byte transfer completes */
 212:Src/Sensor/I2CRoutines.c ****                     while ((I2Cx->SR1 & 0x00004) != 0x000004);
 213:Src/Sensor/I2CRoutines.c ****                     /* Read data */
 214:Src/Sensor/I2CRoutines.c ****                     *pBuffer = I2Cx->DR;
 215:Src/Sensor/I2CRoutines.c ****                     /* */
 216:Src/Sensor/I2CRoutines.c ****                     pBuffer++;
 217:Src/Sensor/I2CRoutines.c ****                     /* Decrement the read bytes counter */
 218:Src/Sensor/I2CRoutines.c ****                     NumByteToRead--;
 219:Src/Sensor/I2CRoutines.c ****                 }
 220:Src/Sensor/I2CRoutines.c **** 
 221:Src/Sensor/I2CRoutines.c ****                 /* it remains to read three data: data N-2, data N-1, Data N */
 222:Src/Sensor/I2CRoutines.c ****                 if (NumByteToRead == 3)
 223:Src/Sensor/I2CRoutines.c ****                 {
 224:Src/Sensor/I2CRoutines.c ****                     /* Wait until BTF is set: Data N-2 in DR and data N -1 in shift register */
 225:Src/Sensor/I2CRoutines.c ****                     while ((I2Cx->SR1 & 0x00004) != 0x000004);
 226:Src/Sensor/I2CRoutines.c ****                     /* Clear ACK */
 227:Src/Sensor/I2CRoutines.c ****                     I2Cx->CR1 &= CR1_ACK_Reset;
 228:Src/Sensor/I2CRoutines.c **** 
 229:Src/Sensor/I2CRoutines.c ****                     /* Disable IRQs around data reading and STOP programming because of the
 230:Src/Sensor/I2CRoutines.c ****                     limitation ? */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 22


 231:Src/Sensor/I2CRoutines.c ****                     __disable_irq();
 232:Src/Sensor/I2CRoutines.c ****                     /* Read Data N-2 */
 233:Src/Sensor/I2CRoutines.c ****                     *pBuffer = I2Cx->DR;
 234:Src/Sensor/I2CRoutines.c ****                     /* Increment */
 235:Src/Sensor/I2CRoutines.c ****                     pBuffer++;
 236:Src/Sensor/I2CRoutines.c ****                     /* Program the STOP */
 237:Src/Sensor/I2CRoutines.c ****                     I2Cx->CR1 |= CR1_STOP_Set;
 238:Src/Sensor/I2CRoutines.c ****                     /* Read DataN-1 */
 239:Src/Sensor/I2CRoutines.c ****                     *pBuffer = I2Cx->DR;
 240:Src/Sensor/I2CRoutines.c ****                     /* Re-enable IRQs */
 241:Src/Sensor/I2CRoutines.c ****                     __enable_irq();
 242:Src/Sensor/I2CRoutines.c ****                     /* Increment */
 243:Src/Sensor/I2CRoutines.c ****                     pBuffer++;
 244:Src/Sensor/I2CRoutines.c ****                     /* Wait until RXNE is set (DR contains the last data) */
 245:Src/Sensor/I2CRoutines.c ****                     while ((I2Cx->SR1 & 0x00040) != 0x000040);
 246:Src/Sensor/I2CRoutines.c ****                     /* Read DataN */
 247:Src/Sensor/I2CRoutines.c ****                     *pBuffer = I2Cx->DR;
 248:Src/Sensor/I2CRoutines.c ****                     /* Reset the number of bytes to be read by master */
 249:Src/Sensor/I2CRoutines.c ****                     NumByteToRead = 0;
 250:Src/Sensor/I2CRoutines.c **** 
 251:Src/Sensor/I2CRoutines.c ****                 }
 252:Src/Sensor/I2CRoutines.c ****             }
 253:Src/Sensor/I2CRoutines.c ****             /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
 254:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->CR1&0x200) == 0x200);
 255:Src/Sensor/I2CRoutines.c ****             /* Enable Acknowledgement to be ready for another reception */
 256:Src/Sensor/I2CRoutines.c ****             I2Cx->CR1 |= CR1_ACK_Set;
 257:Src/Sensor/I2CRoutines.c ****         }
 258:Src/Sensor/I2CRoutines.c **** 
 259:Src/Sensor/I2CRoutines.c ****     }
 260:Src/Sensor/I2CRoutines.c **** 
 261:Src/Sensor/I2CRoutines.c ****     else /* I2Cx Master Reception using Interrupts with highest priority in an application */
 262:Src/Sensor/I2CRoutines.c ****     {
 263:Src/Sensor/I2CRoutines.c ****         /* Enable EVT IT*/
 264:Src/Sensor/I2CRoutines.c ****         I2Cx->CR2 |= I2C_IT_EVT;
 265:Src/Sensor/I2CRoutines.c ****         /* Enable BUF IT */
 266:Src/Sensor/I2CRoutines.c ****         I2Cx->CR2 |= I2C_IT_BUF;
 267:Src/Sensor/I2CRoutines.c ****         /* Set the I2C direction to reception */
 268:Src/Sensor/I2CRoutines.c ****         I2CDirection = I2C_DIRECTION_RX;
 269:Src/Sensor/I2CRoutines.c ****         SlaveAddress |= OAR1_ADD0_Set;
 270:Src/Sensor/I2CRoutines.c ****         Address = SlaveAddress;
 271:Src/Sensor/I2CRoutines.c ****         if (I2Cx == I2C1)    NumbOfBytes1 = NumByteToRead;
 272:Src/Sensor/I2CRoutines.c ****         else NumbOfBytes2 = NumByteToRead;
 273:Src/Sensor/I2CRoutines.c ****         /* Send START condition */
 274:Src/Sensor/I2CRoutines.c ****         I2Cx->CR1 |= CR1_START_Set;
 275:Src/Sensor/I2CRoutines.c ****         /* Wait until the START condition is generated on the bus: START bit is cleared by hardware
 276:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->CR1&0x100) == 0x100);
 277:Src/Sensor/I2CRoutines.c ****         /* Wait until BUSY flag is reset (until a STOP is generated) */
 278:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->SR2 &0x0002) == 0x0002);
 279:Src/Sensor/I2CRoutines.c ****         /* Enable Acknowledgement to be ready for another reception */
 280:Src/Sensor/I2CRoutines.c ****         I2Cx->CR1 |= CR1_ACK_Set;
 281:Src/Sensor/I2CRoutines.c ****     }
 282:Src/Sensor/I2CRoutines.c **** 
 283:Src/Sensor/I2CRoutines.c ****     return Success;
 175              		.loc 1 283 0
 176 00be 0120     		movs	r0, #1
 177              	.LVL6:
 178 00c0 0FE1     		b	.L5
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 23


 179              	.LVL7:
 180              	.L3:
 120:Src/Sensor/I2CRoutines.c ****         {
 181              		.loc 1 120 0
 182 00c2 022A     		cmp	r2, #2
 183 00c4 5BD1     		bne	.L11
 123:Src/Sensor/I2CRoutines.c ****             Timeout = 0xFFFF;
 184              		.loc 1 123 0
 185 00c6 2388     		ldrh	r3, [r4]
 186              	.LVL8:
 187 00c8 9BB2     		uxth	r3, r3
 188 00ca 43F40063 		orr	r3, r3, #2048
 189 00ce 2380     		strh	r3, [r4]	@ movhi
 124:Src/Sensor/I2CRoutines.c ****             /* Send START condition */
 190              		.loc 1 124 0
 191 00d0 4FF6FF73 		movw	r3, #65535
 192 00d4 0093     		str	r3, [sp]
 126:Src/Sensor/I2CRoutines.c ****             /* Wait until SB flag is set: EV5 */
 193              		.loc 1 126 0
 194 00d6 2388     		ldrh	r3, [r4]
 195 00d8 9BB2     		uxth	r3, r3
 196 00da 43F48073 		orr	r3, r3, #256
 197 00de 2380     		strh	r3, [r4]	@ movhi
 128:Src/Sensor/I2CRoutines.c ****             {
 198              		.loc 1 128 0
 199 00e0 05E0     		b	.L12
 200              	.LVL9:
 201              	.L13:
 130:Src/Sensor/I2CRoutines.c ****                     return Error;
 202              		.loc 1 130 0
 203 00e2 009B     		ldr	r3, [sp]
 204 00e4 5A1E     		subs	r2, r3, #1
 205 00e6 0092     		str	r2, [sp]
 206 00e8 002B     		cmp	r3, #0
 207 00ea 00F0E880 		beq	.L36
 208              	.L12:
 128:Src/Sensor/I2CRoutines.c ****             {
 209              		.loc 1 128 0
 210 00ee A38A     		ldrh	r3, [r4, #20]
 211 00f0 13F0010F 		tst	r3, #1
 212 00f4 F5D0     		beq	.L13
 133:Src/Sensor/I2CRoutines.c ****             /* Send slave address */
 213              		.loc 1 133 0
 214 00f6 4FF6FF73 		movw	r3, #65535
 215 00fa 0093     		str	r3, [sp]
 136:Src/Sensor/I2CRoutines.c ****             Address = SlaveAddress;
 216              		.loc 1 136 0
 217 00fc 40F00100 		orr	r0, r0, #1
 218              	.LVL10:
 137:Src/Sensor/I2CRoutines.c ****             /* Send the slave address */
 219              		.loc 1 137 0
 220 0100 724B     		ldr	r3, .L41
 221 0102 1870     		strb	r0, [r3]
 139:Src/Sensor/I2CRoutines.c ****             /* Wait until ADDR is set: EV6 */
 222              		.loc 1 139 0
 223 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 224 0106 2382     		strh	r3, [r4, #16]	@ movhi
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 24


 141:Src/Sensor/I2CRoutines.c ****             {
 225              		.loc 1 141 0
 226 0108 05E0     		b	.L14
 227              	.L15:
 143:Src/Sensor/I2CRoutines.c ****                     return Error;
 228              		.loc 1 143 0
 229 010a 009B     		ldr	r3, [sp]
 230 010c 5A1E     		subs	r2, r3, #1
 231 010e 0092     		str	r2, [sp]
 232 0110 002B     		cmp	r3, #0
 233 0112 00F0D680 		beq	.L37
 234              	.L14:
 141:Src/Sensor/I2CRoutines.c ****             {
 235              		.loc 1 141 0
 236 0116 A38A     		ldrh	r3, [r4, #20]
 237 0118 03F00203 		and	r3, r3, #2
 238 011c 9BB2     		uxth	r3, r3
 239 011e 002B     		cmp	r3, #0
 240 0120 F3D0     		beq	.L15
 241              	.LBB22:
 242              	.LBB23:
 243              		.loc 2 791 0
 244              		.syntax unified
 245              	@ 791 "CMSIS/Core/CM3/core_cm3.h" 1
 246 0122 72B6     		cpsid i
 247              	@ 0 "" 2
 248              		.thumb
 249              		.syntax unified
 250              	.LBE23:
 251              	.LBE22:
 151:Src/Sensor/I2CRoutines.c ****             /* Clear ACK */
 252              		.loc 1 151 0
 253 0124 238B     		ldrh	r3, [r4, #24]
 254 0126 9BB2     		uxth	r3, r3
 255 0128 0193     		str	r3, [sp, #4]
 153:Src/Sensor/I2CRoutines.c ****             /*Re-enable IRQs */
 256              		.loc 1 153 0
 257 012a 2388     		ldrh	r3, [r4]
 258 012c 9BB2     		uxth	r3, r3
 259 012e 23F48063 		bic	r3, r3, #1024
 260 0132 9BB2     		uxth	r3, r3
 261 0134 2380     		strh	r3, [r4]	@ movhi
 262              	.LBB24:
 263              	.LBB25:
 790:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 264              		.loc 2 790 0
 265              		.syntax unified
 266              	@ 790 "CMSIS/Core/CM3/core_cm3.h" 1
 267 0136 62B6     		cpsie i
 268              	@ 0 "" 2
 269              		.thumb
 270              		.syntax unified
 271              	.L16:
 272              	.LBE25:
 273              	.LBE24:
 157:Src/Sensor/I2CRoutines.c ****             /* Disable IRQs around STOP programming and data reading because of the limitation ?*/
 274              		.loc 1 157 0 discriminator 1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 25


 275 0138 A38A     		ldrh	r3, [r4, #20]
 276 013a 03F00403 		and	r3, r3, #4
 277 013e 9BB2     		uxth	r3, r3
 278 0140 002B     		cmp	r3, #0
 279 0142 F9D0     		beq	.L16
 280              	.LBB26:
 281              	.LBB27:
 282              		.loc 2 791 0
 283              		.syntax unified
 284              	@ 791 "CMSIS/Core/CM3/core_cm3.h" 1
 285 0144 72B6     		cpsid i
 286              	@ 0 "" 2
 287              		.thumb
 288              		.syntax unified
 289              	.LBE27:
 290              	.LBE26:
 161:Src/Sensor/I2CRoutines.c ****             /* Read first data */
 291              		.loc 1 161 0
 292 0146 0121     		movs	r1, #1
 293 0148 2046     		mov	r0, r4
 294              	.LVL11:
 295 014a FFF7FEFF 		bl	I2C_GenerateSTOP
 296              	.LVL12:
 163:Src/Sensor/I2CRoutines.c ****             /* Re-enable IRQs */
 297              		.loc 1 163 0
 298 014e 238A     		ldrh	r3, [r4, #16]
 299 0150 2B70     		strb	r3, [r5]
 300              	.LBB28:
 301              	.LBB29:
 790:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 302              		.loc 2 790 0
 303              		.syntax unified
 304              	@ 790 "CMSIS/Core/CM3/core_cm3.h" 1
 305 0152 62B6     		cpsie i
 306              	@ 0 "" 2
 307              	.LVL13:
 308              		.thumb
 309              		.syntax unified
 310              	.LBE29:
 311              	.LBE28:
 169:Src/Sensor/I2CRoutines.c ****             /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
 312              		.loc 1 169 0
 313 0154 238A     		ldrh	r3, [r4, #16]
 314 0156 6B70     		strb	r3, [r5, #1]
 315              	.L17:
 171:Src/Sensor/I2CRoutines.c ****             /* Enable Acknowledgement to be ready for another reception */
 316              		.loc 1 171 0 discriminator 1
 317 0158 2388     		ldrh	r3, [r4]
 318 015a 03F40073 		and	r3, r3, #512
 319 015e 9BB2     		uxth	r3, r3
 320 0160 002B     		cmp	r3, #0
 321 0162 F9D1     		bne	.L17
 173:Src/Sensor/I2CRoutines.c ****             /* Clear POS bit */
 322              		.loc 1 173 0
 323 0164 2388     		ldrh	r3, [r4]
 324 0166 9BB2     		uxth	r3, r3
 325 0168 43F48063 		orr	r3, r3, #1024
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 26


 326 016c 2380     		strh	r3, [r4]	@ movhi
 175:Src/Sensor/I2CRoutines.c **** 
 327              		.loc 1 175 0
 328 016e 2388     		ldrh	r3, [r4]
 329 0170 9BB2     		uxth	r3, r3
 330 0172 23F40063 		bic	r3, r3, #2048
 331 0176 9BB2     		uxth	r3, r3
 332 0178 2380     		strh	r3, [r4]	@ movhi
 333              		.loc 1 283 0
 334 017a 0120     		movs	r0, #1
 335 017c B1E0     		b	.L5
 336              	.LVL14:
 337              	.L11:
 180:Src/Sensor/I2CRoutines.c ****             /* Send START condition */
 338              		.loc 1 180 0
 339 017e 4FF6FF73 		movw	r3, #65535
 340              	.LVL15:
 341 0182 0093     		str	r3, [sp]
 182:Src/Sensor/I2CRoutines.c ****             /* Wait until SB flag is set: EV5 */
 342              		.loc 1 182 0
 343 0184 2388     		ldrh	r3, [r4]
 344 0186 9BB2     		uxth	r3, r3
 345 0188 43F48073 		orr	r3, r3, #256
 346 018c 2380     		strh	r3, [r4]	@ movhi
 184:Src/Sensor/I2CRoutines.c ****             {
 347              		.loc 1 184 0
 348 018e 05E0     		b	.L18
 349              	.L19:
 186:Src/Sensor/I2CRoutines.c ****                     return Error;
 350              		.loc 1 186 0
 351 0190 009B     		ldr	r3, [sp]
 352 0192 591E     		subs	r1, r3, #1
 353 0194 0091     		str	r1, [sp]
 354 0196 002B     		cmp	r3, #0
 355 0198 00F09580 		beq	.L38
 356              	.L18:
 184:Src/Sensor/I2CRoutines.c ****             {
 357              		.loc 1 184 0
 358 019c A38A     		ldrh	r3, [r4, #20]
 359 019e 13F0010F 		tst	r3, #1
 360 01a2 F5D0     		beq	.L19
 189:Src/Sensor/I2CRoutines.c ****             /* Send slave address */
 361              		.loc 1 189 0
 362 01a4 4FF6FF73 		movw	r3, #65535
 363 01a8 0093     		str	r3, [sp]
 192:Src/Sensor/I2CRoutines.c ****             Address = SlaveAddress;
 364              		.loc 1 192 0
 365 01aa 40F00100 		orr	r0, r0, #1
 366              	.LVL16:
 193:Src/Sensor/I2CRoutines.c ****             /* Send the slave address */
 367              		.loc 1 193 0
 368 01ae 474B     		ldr	r3, .L41
 369 01b0 1870     		strb	r0, [r3]
 195:Src/Sensor/I2CRoutines.c ****             /* Wait until ADDR is set: EV6 */
 370              		.loc 1 195 0
 371 01b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 01b4 2382     		strh	r3, [r4, #16]	@ movhi
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 27


 197:Src/Sensor/I2CRoutines.c ****             {
 373              		.loc 1 197 0
 374 01b6 05E0     		b	.L20
 375              	.L21:
 199:Src/Sensor/I2CRoutines.c ****                     return Error;
 376              		.loc 1 199 0
 377 01b8 009B     		ldr	r3, [sp]
 378 01ba 591E     		subs	r1, r3, #1
 379 01bc 0091     		str	r1, [sp]
 380 01be 002B     		cmp	r3, #0
 381 01c0 00F08E80 		beq	.L39
 382              	.L20:
 197:Src/Sensor/I2CRoutines.c ****             {
 383              		.loc 1 197 0
 384 01c4 A38A     		ldrh	r3, [r4, #20]
 385 01c6 03F00203 		and	r3, r3, #2
 386 01ca 9BB2     		uxth	r3, r3
 387 01cc 002B     		cmp	r3, #0
 388 01ce F3D0     		beq	.L21
 203:Src/Sensor/I2CRoutines.c ****             /* While there is data to be read */
 389              		.loc 1 203 0
 390 01d0 238B     		ldrh	r3, [r4, #24]
 391 01d2 9BB2     		uxth	r3, r3
 392 01d4 0193     		str	r3, [sp, #4]
 205:Src/Sensor/I2CRoutines.c ****             {
 393              		.loc 1 205 0
 394 01d6 2FE0     		b	.L25
 395              	.L28:
 208:Src/Sensor/I2CRoutines.c ****                 {
 396              		.loc 1 208 0
 397 01d8 032A     		cmp	r2, #3
 398 01da 09D0     		beq	.L23
 399              	.L24:
 212:Src/Sensor/I2CRoutines.c ****                     /* Read data */
 400              		.loc 1 212 0 discriminator 1
 401 01dc A38A     		ldrh	r3, [r4, #20]
 402 01de 03F00403 		and	r3, r3, #4
 403 01e2 9BB2     		uxth	r3, r3
 404 01e4 002B     		cmp	r3, #0
 405 01e6 F9D0     		beq	.L24
 214:Src/Sensor/I2CRoutines.c ****                     /* */
 406              		.loc 1 214 0
 407 01e8 238A     		ldrh	r3, [r4, #16]
 408 01ea 05F8013B 		strb	r3, [r5], #1
 409              	.LVL17:
 218:Src/Sensor/I2CRoutines.c ****                 }
 410              		.loc 1 218 0
 411 01ee 013A     		subs	r2, r2, #1
 412              	.LVL18:
 413              	.L23:
 222:Src/Sensor/I2CRoutines.c ****                 {
 414              		.loc 1 222 0
 415 01f0 032A     		cmp	r2, #3
 416 01f2 21D1     		bne	.L25
 417              	.L26:
 225:Src/Sensor/I2CRoutines.c ****                     /* Clear ACK */
 418              		.loc 1 225 0 discriminator 1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 28


 419 01f4 A38A     		ldrh	r3, [r4, #20]
 420 01f6 03F00403 		and	r3, r3, #4
 421 01fa 9BB2     		uxth	r3, r3
 422 01fc 002B     		cmp	r3, #0
 423 01fe F9D0     		beq	.L26
 227:Src/Sensor/I2CRoutines.c **** 
 424              		.loc 1 227 0
 425 0200 2388     		ldrh	r3, [r4]
 426 0202 9BB2     		uxth	r3, r3
 427 0204 23F48063 		bic	r3, r3, #1024
 428 0208 9BB2     		uxth	r3, r3
 429 020a 2380     		strh	r3, [r4]	@ movhi
 430              	.LBB30:
 431              	.LBB31:
 432              		.loc 2 791 0
 433              		.syntax unified
 434              	@ 791 "CMSIS/Core/CM3/core_cm3.h" 1
 435 020c 72B6     		cpsid i
 436              	@ 0 "" 2
 437              		.thumb
 438              		.syntax unified
 439              	.LBE31:
 440              	.LBE30:
 233:Src/Sensor/I2CRoutines.c ****                     /* Increment */
 441              		.loc 1 233 0
 442 020e 238A     		ldrh	r3, [r4, #16]
 443 0210 2B70     		strb	r3, [r5]
 444              	.LVL19:
 237:Src/Sensor/I2CRoutines.c ****                     /* Read DataN-1 */
 445              		.loc 1 237 0
 446 0212 2388     		ldrh	r3, [r4]
 447 0214 9BB2     		uxth	r3, r3
 448 0216 43F40073 		orr	r3, r3, #512
 449 021a 2380     		strh	r3, [r4]	@ movhi
 239:Src/Sensor/I2CRoutines.c ****                     /* Re-enable IRQs */
 450              		.loc 1 239 0
 451 021c 238A     		ldrh	r3, [r4, #16]
 452 021e 6B70     		strb	r3, [r5, #1]
 453              	.LBB32:
 454              	.LBB33:
 790:CMSIS/Core/CM3/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 455              		.loc 2 790 0
 456              		.syntax unified
 457              	@ 790 "CMSIS/Core/CM3/core_cm3.h" 1
 458 0220 62B6     		cpsie i
 459              	@ 0 "" 2
 460              		.thumb
 461              		.syntax unified
 462              	.LBE33:
 463              	.LBE32:
 243:Src/Sensor/I2CRoutines.c ****                     /* Wait until RXNE is set (DR contains the last data) */
 464              		.loc 1 243 0
 465 0222 A91C     		adds	r1, r5, #2
 466              	.LVL20:
 467              	.L27:
 245:Src/Sensor/I2CRoutines.c ****                     /* Read DataN */
 468              		.loc 1 245 0 discriminator 1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 29


 469 0224 A38A     		ldrh	r3, [r4, #20]
 470 0226 03F04003 		and	r3, r3, #64
 471 022a 9BB2     		uxth	r3, r3
 472 022c 002B     		cmp	r3, #0
 473 022e F9D0     		beq	.L27
 247:Src/Sensor/I2CRoutines.c ****                     /* Reset the number of bytes to be read by master */
 474              		.loc 1 247 0
 475 0230 238A     		ldrh	r3, [r4, #16]
 476 0232 AB70     		strb	r3, [r5, #2]
 477              	.LVL21:
 249:Src/Sensor/I2CRoutines.c **** 
 478              		.loc 1 249 0
 479 0234 0022     		movs	r2, #0
 243:Src/Sensor/I2CRoutines.c ****                     /* Wait until RXNE is set (DR contains the last data) */
 480              		.loc 1 243 0
 481 0236 0D46     		mov	r5, r1
 482              	.LVL22:
 483              	.L25:
 205:Src/Sensor/I2CRoutines.c ****             {
 484              		.loc 1 205 0
 485 0238 002A     		cmp	r2, #0
 486 023a CDD1     		bne	.L28
 487              	.L29:
 254:Src/Sensor/I2CRoutines.c ****             /* Enable Acknowledgement to be ready for another reception */
 488              		.loc 1 254 0 discriminator 1
 489 023c 2388     		ldrh	r3, [r4]
 490 023e 03F40073 		and	r3, r3, #512
 491 0242 9BB2     		uxth	r3, r3
 492 0244 002B     		cmp	r3, #0
 493 0246 F9D1     		bne	.L29
 256:Src/Sensor/I2CRoutines.c ****         }
 494              		.loc 1 256 0
 495 0248 2388     		ldrh	r3, [r4]
 496 024a 9BB2     		uxth	r3, r3
 497 024c 43F48063 		orr	r3, r3, #1024
 498 0250 2380     		strh	r3, [r4]	@ movhi
 499              		.loc 1 283 0
 500 0252 0120     		movs	r0, #1
 501              	.LVL23:
 502 0254 45E0     		b	.L5
 503              	.LVL24:
 504              	.L2:
 264:Src/Sensor/I2CRoutines.c ****         /* Enable BUF IT */
 505              		.loc 1 264 0
 506 0256 A388     		ldrh	r3, [r4, #4]
 507              	.LVL25:
 508 0258 9BB2     		uxth	r3, r3
 509 025a 43F40073 		orr	r3, r3, #512
 510 025e A380     		strh	r3, [r4, #4]	@ movhi
 266:Src/Sensor/I2CRoutines.c ****         /* Set the I2C direction to reception */
 511              		.loc 1 266 0
 512 0260 A388     		ldrh	r3, [r4, #4]
 513 0262 9BB2     		uxth	r3, r3
 514 0264 43F48063 		orr	r3, r3, #1024
 515 0268 A380     		strh	r3, [r4, #4]	@ movhi
 268:Src/Sensor/I2CRoutines.c ****         SlaveAddress |= OAR1_ADD0_Set;
 516              		.loc 1 268 0
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 30


 517 026a 0121     		movs	r1, #1
 518 026c 184B     		ldr	r3, .L41+4
 519 026e 1960     		str	r1, [r3]
 269:Src/Sensor/I2CRoutines.c ****         Address = SlaveAddress;
 520              		.loc 1 269 0
 521 0270 0843     		orrs	r0, r0, r1
 522              	.LVL26:
 270:Src/Sensor/I2CRoutines.c ****         if (I2Cx == I2C1)    NumbOfBytes1 = NumByteToRead;
 523              		.loc 1 270 0
 524 0272 164B     		ldr	r3, .L41
 525 0274 1870     		strb	r0, [r3]
 271:Src/Sensor/I2CRoutines.c ****         else NumbOfBytes2 = NumByteToRead;
 526              		.loc 1 271 0
 527 0276 174B     		ldr	r3, .L41+8
 528 0278 9C42     		cmp	r4, r3
 529 027a 02D1     		bne	.L30
 271:Src/Sensor/I2CRoutines.c ****         else NumbOfBytes2 = NumByteToRead;
 530              		.loc 1 271 0 is_stmt 0 discriminator 1
 531 027c 164B     		ldr	r3, .L41+12
 532 027e 1A60     		str	r2, [r3]
 533 0280 01E0     		b	.L31
 534              	.L30:
 272:Src/Sensor/I2CRoutines.c ****         /* Send START condition */
 535              		.loc 1 272 0 is_stmt 1
 536 0282 164B     		ldr	r3, .L41+16
 537 0284 1A60     		str	r2, [r3]
 538              	.L31:
 274:Src/Sensor/I2CRoutines.c ****         /* Wait until the START condition is generated on the bus: START bit is cleared by hardware
 539              		.loc 1 274 0
 540 0286 2388     		ldrh	r3, [r4]
 541 0288 9BB2     		uxth	r3, r3
 542 028a 43F48073 		orr	r3, r3, #256
 543 028e 2380     		strh	r3, [r4]	@ movhi
 544              	.L32:
 276:Src/Sensor/I2CRoutines.c ****         /* Wait until BUSY flag is reset (until a STOP is generated) */
 545              		.loc 1 276 0 discriminator 1
 546 0290 2388     		ldrh	r3, [r4]
 547 0292 03F48073 		and	r3, r3, #256
 548 0296 9BB2     		uxth	r3, r3
 549 0298 002B     		cmp	r3, #0
 550 029a F9D1     		bne	.L32
 551              	.L33:
 278:Src/Sensor/I2CRoutines.c ****         /* Enable Acknowledgement to be ready for another reception */
 552              		.loc 1 278 0 discriminator 1
 553 029c 238B     		ldrh	r3, [r4, #24]
 554 029e 03F00203 		and	r3, r3, #2
 555 02a2 9BB2     		uxth	r3, r3
 556 02a4 002B     		cmp	r3, #0
 557 02a6 F9D1     		bne	.L33
 280:Src/Sensor/I2CRoutines.c ****     }
 558              		.loc 1 280 0
 559 02a8 2388     		ldrh	r3, [r4]
 560 02aa 9BB2     		uxth	r3, r3
 561 02ac 43F48063 		orr	r3, r3, #1024
 562 02b0 2380     		strh	r3, [r4]	@ movhi
 563              		.loc 1 283 0
 564 02b2 0120     		movs	r0, #1
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 31


 565              	.LVL27:
 566 02b4 15E0     		b	.L5
 567              	.LVL28:
 568              	.L34:
  80:Src/Sensor/I2CRoutines.c ****             }
 569              		.loc 1 80 0
 570 02b6 0020     		movs	r0, #0
 571 02b8 13E0     		b	.L5
 572              	.LVL29:
 573              	.L35:
  96:Src/Sensor/I2CRoutines.c ****             }
 574              		.loc 1 96 0
 575 02ba 0020     		movs	r0, #0
 576              	.LVL30:
 577 02bc 11E0     		b	.L5
 578              	.LVL31:
 579              	.L36:
 131:Src/Sensor/I2CRoutines.c ****             }
 580              		.loc 1 131 0
 581 02be 0020     		movs	r0, #0
 582 02c0 0FE0     		b	.L5
 583              	.LVL32:
 584              	.L37:
 144:Src/Sensor/I2CRoutines.c ****             }
 585              		.loc 1 144 0
 586 02c2 0020     		movs	r0, #0
 587              	.LVL33:
 588 02c4 0DE0     		b	.L5
 589              	.LVL34:
 590              	.L38:
 187:Src/Sensor/I2CRoutines.c ****             }
 591              		.loc 1 187 0
 592 02c6 0020     		movs	r0, #0
 593 02c8 0BE0     		b	.L5
 594              	.L42:
 595 02ca 00BF     		.align	2
 596              	.L41:
 597 02cc 00000000 		.word	Address
 598 02d0 00000000 		.word	.LANCHOR0
 599 02d4 00540040 		.word	1073763328
 600 02d8 00000000 		.word	NumbOfBytes1
 601 02dc 00000000 		.word	NumbOfBytes2
 602              	.LVL35:
 603              	.L39:
 200:Src/Sensor/I2CRoutines.c ****             }
 604              		.loc 1 200 0
 605 02e0 0020     		movs	r0, #0
 606              	.LVL36:
 607              	.L5:
 284:Src/Sensor/I2CRoutines.c **** }
 608              		.loc 1 284 0
 609 02e2 03B0     		add	sp, sp, #12
 610              	.LCFI2:
 611              		.cfi_def_cfa_offset 12
 612              		@ sp needed
 613 02e4 30BD     		pop	{r4, r5, pc}
 614              		.cfi_endproc
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 32


 615              	.LFE28:
 617 02e6 00BF     		.section	.text.I2C_Master_BufferWrite,"ax",%progbits
 618              		.align	2
 619              		.global	I2C_Master_BufferWrite
 620              		.thumb
 621              		.thumb_func
 623              	I2C_Master_BufferWrite:
 624              	.LFB29:
 285:Src/Sensor/I2CRoutines.c **** 
 286:Src/Sensor/I2CRoutines.c **** /**
 287:Src/Sensor/I2CRoutines.c ****   * @brief  Writes buffer of bytes.
 288:Src/Sensor/I2CRoutines.c ****   * @param pBuffer: Buffer of bytes to be sent to the slave.
 289:Src/Sensor/I2CRoutines.c ****   * @param NumByteToWrite: Number of bytes to be sent by the Master.
 290:Src/Sensor/I2CRoutines.c ****   * @param Mode: Polling or DMA or Interrupt having the highest priority in the application.
 291:Src/Sensor/I2CRoutines.c ****   * @param SlaveAddress: The address of the slave to be addressed by the Master.
 292:Src/Sensor/I2CRoutines.c ****   * @retval : None.
 293:Src/Sensor/I2CRoutines.c ****   */
 294:Src/Sensor/I2CRoutines.c **** Status I2C_Master_BufferWrite(I2C_TypeDef* I2Cx, uint8_t* pBuffer,
 295:Src/Sensor/I2CRoutines.c ****                     uint32_t NumByteToWrite, I2C_ProgrammingModel Mode, uint8_t SlaveAddress )
 296:Src/Sensor/I2CRoutines.c **** {
 625              		.loc 1 296 0
 626              		.cfi_startproc
 627              		@ args = 4, pretend = 0, frame = 8
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              		@ link register save eliminated.
 630              	.LVL37:
 631 0000 30B4     		push	{r4, r5}
 632              	.LCFI3:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 4, -8
 635              		.cfi_offset 5, -4
 636 0002 82B0     		sub	sp, sp, #8
 637              	.LCFI4:
 638              		.cfi_def_cfa_offset 16
 639 0004 9DF81050 		ldrb	r5, [sp, #16]	@ zero_extendqisi2
 297:Src/Sensor/I2CRoutines.c **** 
 298:Src/Sensor/I2CRoutines.c ****     __IO uint32_t temp = 0;
 640              		.loc 1 298 0
 641 0008 0024     		movs	r4, #0
 642 000a 0194     		str	r4, [sp, #4]
 299:Src/Sensor/I2CRoutines.c ****     __IO uint32_t Timeout = 0;
 643              		.loc 1 299 0
 644 000c 0094     		str	r4, [sp]
 300:Src/Sensor/I2CRoutines.c **** 
 301:Src/Sensor/I2CRoutines.c ****     /* Enable Error IT (used in all modes: DMA, Polling and Interrupts */
 302:Src/Sensor/I2CRoutines.c ****     I2Cx->CR2 |= I2C_IT_ERR;
 645              		.loc 1 302 0
 646 000e 8488     		ldrh	r4, [r0, #4]
 647 0010 A4B2     		uxth	r4, r4
 648 0012 44F48074 		orr	r4, r4, #256
 649 0016 8480     		strh	r4, [r0, #4]	@ movhi
 303:Src/Sensor/I2CRoutines.c ****     
 304:Src/Sensor/I2CRoutines.c ****     if (Mode == Polling) /* I2Cx Master Transmission using Polling */
 650              		.loc 1 304 0
 651 0018 002B     		cmp	r3, #0
 652 001a 4ED1     		bne	.L44
 305:Src/Sensor/I2CRoutines.c ****     {
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 33


 306:Src/Sensor/I2CRoutines.c ****         Timeout = 0xFFFF;
 653              		.loc 1 306 0
 654 001c 4FF6FF73 		movw	r3, #65535
 655              	.LVL38:
 656 0020 0093     		str	r3, [sp]
 307:Src/Sensor/I2CRoutines.c ****         /* Send START condition */
 308:Src/Sensor/I2CRoutines.c ****         I2Cx->CR1 |= CR1_START_Set;
 657              		.loc 1 308 0
 658 0022 0388     		ldrh	r3, [r0]
 659 0024 9BB2     		uxth	r3, r3
 660 0026 43F48073 		orr	r3, r3, #256
 661 002a 0380     		strh	r3, [r0]	@ movhi
 309:Src/Sensor/I2CRoutines.c ****         /* Wait until SB flag is set: EV5 */
 310:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->SR1&0x0001) != 0x0001)
 662              		.loc 1 310 0
 663 002c 04E0     		b	.L45
 664              	.L47:
 311:Src/Sensor/I2CRoutines.c ****         {
 312:Src/Sensor/I2CRoutines.c ****             if (Timeout-- == 0)
 665              		.loc 1 312 0
 666 002e 009B     		ldr	r3, [sp]
 667 0030 5C1E     		subs	r4, r3, #1
 668 0032 0094     		str	r4, [sp]
 669 0034 002B     		cmp	r3, #0
 670 0036 6CD0     		beq	.L58
 671              	.L45:
 310:Src/Sensor/I2CRoutines.c ****         {
 672              		.loc 1 310 0
 673 0038 838A     		ldrh	r3, [r0, #20]
 674 003a 13F0010F 		tst	r3, #1
 675 003e F6D0     		beq	.L47
 313:Src/Sensor/I2CRoutines.c ****                 return Error;
 314:Src/Sensor/I2CRoutines.c ****         }
 315:Src/Sensor/I2CRoutines.c **** 
 316:Src/Sensor/I2CRoutines.c ****         /* Send slave address */
 317:Src/Sensor/I2CRoutines.c ****         /* Reset the address bit0 for write*/
 318:Src/Sensor/I2CRoutines.c ****         SlaveAddress &= OAR1_ADD0_Reset;
 676              		.loc 1 318 0
 677 0040 05F0FE05 		and	r5, r5, #254
 678              	.LVL39:
 319:Src/Sensor/I2CRoutines.c ****         Address = SlaveAddress;
 679              		.loc 1 319 0
 680 0044 364B     		ldr	r3, .L61
 681 0046 1D70     		strb	r5, [r3]
 320:Src/Sensor/I2CRoutines.c ****         /* Send the slave address */
 321:Src/Sensor/I2CRoutines.c ****         I2Cx->DR = Address;
 682              		.loc 1 321 0
 683 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 004a 0382     		strh	r3, [r0, #16]	@ movhi
 322:Src/Sensor/I2CRoutines.c ****         Timeout = 0xFFFF;
 685              		.loc 1 322 0
 686 004c 4FF6FF73 		movw	r3, #65535
 687 0050 0093     		str	r3, [sp]
 323:Src/Sensor/I2CRoutines.c ****         /* Wait until ADDR is set: EV6 */
 324:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->SR1 &0x0002) != 0x0002)
 688              		.loc 1 324 0
 689 0052 04E0     		b	.L48
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 34


 690              	.L49:
 325:Src/Sensor/I2CRoutines.c ****         {
 326:Src/Sensor/I2CRoutines.c ****             if (Timeout-- == 0)
 691              		.loc 1 326 0
 692 0054 009B     		ldr	r3, [sp]
 693 0056 5C1E     		subs	r4, r3, #1
 694 0058 0094     		str	r4, [sp]
 695 005a 002B     		cmp	r3, #0
 696 005c 5BD0     		beq	.L59
 697              	.L48:
 324:Src/Sensor/I2CRoutines.c ****         {
 698              		.loc 1 324 0
 699 005e 838A     		ldrh	r3, [r0, #20]
 700 0060 03F00203 		and	r3, r3, #2
 701 0064 9BB2     		uxth	r3, r3
 702 0066 002B     		cmp	r3, #0
 703 0068 F4D0     		beq	.L49
 327:Src/Sensor/I2CRoutines.c ****                 return Error;
 328:Src/Sensor/I2CRoutines.c ****         }
 329:Src/Sensor/I2CRoutines.c **** 
 330:Src/Sensor/I2CRoutines.c ****         /* Clear ADDR flag by reading SR2 register */
 331:Src/Sensor/I2CRoutines.c ****         temp = I2Cx->SR2;
 704              		.loc 1 331 0
 705 006a 038B     		ldrh	r3, [r0, #24]
 706 006c 9BB2     		uxth	r3, r3
 707 006e 0193     		str	r3, [sp, #4]
 332:Src/Sensor/I2CRoutines.c ****         /* Write the first data in DR register (EV8_1) */
 333:Src/Sensor/I2CRoutines.c ****         I2Cx->DR = *pBuffer;
 708              		.loc 1 333 0
 709 0070 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 710              	.LVL40:
 711 0074 0382     		strh	r3, [r0, #16]	@ movhi
 712              	.LVL41:
 334:Src/Sensor/I2CRoutines.c ****         /* Increment */
 335:Src/Sensor/I2CRoutines.c ****         pBuffer++;
 336:Src/Sensor/I2CRoutines.c ****         /* Decrement the number of bytes to be written */
 337:Src/Sensor/I2CRoutines.c ****         NumByteToWrite--;
 713              		.loc 1 337 0
 714 0076 013A     		subs	r2, r2, #1
 715              	.LVL42:
 338:Src/Sensor/I2CRoutines.c ****         /* While there is data to be written */
 339:Src/Sensor/I2CRoutines.c ****         while (NumByteToWrite--)
 716              		.loc 1 339 0
 717 0078 09E0     		b	.L50
 718              	.LVL43:
 719              	.L51:
 340:Src/Sensor/I2CRoutines.c ****         {
 341:Src/Sensor/I2CRoutines.c ****             /* Poll on BTF to receive data because in polling mode we can not guarantee the
 342:Src/Sensor/I2CRoutines.c ****               EV8 software sequence is managed before the current byte transfer completes */
 343:Src/Sensor/I2CRoutines.c ****             while ((I2Cx->SR1 & 0x00004) != 0x000004);
 720              		.loc 1 343 0 discriminator 1
 721 007a 838A     		ldrh	r3, [r0, #20]
 722 007c 03F00403 		and	r3, r3, #4
 723 0080 9BB2     		uxth	r3, r3
 724 0082 002B     		cmp	r3, #0
 725 0084 F9D0     		beq	.L51
 344:Src/Sensor/I2CRoutines.c ****             /* Send the current byte */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 35


 345:Src/Sensor/I2CRoutines.c ****             I2Cx->DR = *pBuffer;
 726              		.loc 1 345 0
 727 0086 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 728              	.LVL44:
 729 008a 0382     		strh	r3, [r0, #16]	@ movhi
 730              	.LVL45:
 339:Src/Sensor/I2CRoutines.c ****         {
 731              		.loc 1 339 0
 732 008c 2246     		mov	r2, r4
 733              	.LVL46:
 734              	.L50:
 735 008e 541E     		subs	r4, r2, #1
 736              	.LVL47:
 737 0090 002A     		cmp	r2, #0
 738 0092 F2D1     		bne	.L51
 739              	.L52:
 346:Src/Sensor/I2CRoutines.c ****             /* Point to the next byte to be written */
 347:Src/Sensor/I2CRoutines.c ****             pBuffer++;
 348:Src/Sensor/I2CRoutines.c ****         }
 349:Src/Sensor/I2CRoutines.c ****         /* EV8_2: Wait until BTF is set before programming the STOP */
 350:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->SR1 & 0x00004) != 0x000004);
 740              		.loc 1 350 0 discriminator 1
 741 0094 838A     		ldrh	r3, [r0, #20]
 742 0096 03F00403 		and	r3, r3, #4
 743 009a 9BB2     		uxth	r3, r3
 744 009c 002B     		cmp	r3, #0
 745 009e F9D0     		beq	.L52
 351:Src/Sensor/I2CRoutines.c ****         /* Send STOP condition */
 352:Src/Sensor/I2CRoutines.c ****         I2Cx->CR1 |= CR1_STOP_Set;
 746              		.loc 1 352 0
 747 00a0 0388     		ldrh	r3, [r0]
 748 00a2 9BB2     		uxth	r3, r3
 749 00a4 43F40073 		orr	r3, r3, #512
 750 00a8 0380     		strh	r3, [r0]	@ movhi
 751              	.L53:
 353:Src/Sensor/I2CRoutines.c ****         /* Make sure that the STOP bit is cleared by Hardware */
 354:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->CR1&0x200) == 0x200);
 752              		.loc 1 354 0 discriminator 1
 753 00aa 0388     		ldrh	r3, [r0]
 754 00ac 03F40073 		and	r3, r3, #512
 755 00b0 9BB2     		uxth	r3, r3
 756 00b2 002B     		cmp	r3, #0
 757 00b4 F9D1     		bne	.L53
 355:Src/Sensor/I2CRoutines.c **** 
 356:Src/Sensor/I2CRoutines.c ****     }
 357:Src/Sensor/I2CRoutines.c **** 
 358:Src/Sensor/I2CRoutines.c ****     else /* I2Cx Master Transmission using Interrupt with highest priority in the application */
 359:Src/Sensor/I2CRoutines.c **** 
 360:Src/Sensor/I2CRoutines.c ****     {
 361:Src/Sensor/I2CRoutines.c ****         /* Enable EVT IT*/
 362:Src/Sensor/I2CRoutines.c ****         I2Cx->CR2 |= I2C_IT_EVT;
 363:Src/Sensor/I2CRoutines.c ****         /* Enable BUF IT */
 364:Src/Sensor/I2CRoutines.c ****         I2Cx->CR2 |= I2C_IT_BUF;
 365:Src/Sensor/I2CRoutines.c ****         /* Set the I2C direction to Transmission */
 366:Src/Sensor/I2CRoutines.c ****         I2CDirection = I2C_DIRECTION_TX;
 367:Src/Sensor/I2CRoutines.c ****         SlaveAddress &= OAR1_ADD0_Reset;
 368:Src/Sensor/I2CRoutines.c ****         Address = SlaveAddress;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 36


 369:Src/Sensor/I2CRoutines.c ****         if (I2Cx == I2C1)    NumbOfBytes1 = NumByteToWrite;
 370:Src/Sensor/I2CRoutines.c ****         else NumbOfBytes2 = NumByteToWrite;
 371:Src/Sensor/I2CRoutines.c ****         /* Send START condition */
 372:Src/Sensor/I2CRoutines.c ****         I2Cx->CR1 |= CR1_START_Set;
 373:Src/Sensor/I2CRoutines.c ****         /* Wait until the START condition is generated on the bus: the START bit is cleared by hard
 374:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->CR1&0x100) == 0x100);
 375:Src/Sensor/I2CRoutines.c ****         /* Wait until BUSY flag is reset: a STOP has been generated on the bus signaling the end
 376:Src/Sensor/I2CRoutines.c ****         of transmission */
 377:Src/Sensor/I2CRoutines.c ****         while ((I2Cx->SR2 &0x0002) == 0x0002);
 378:Src/Sensor/I2CRoutines.c ****     }
 379:Src/Sensor/I2CRoutines.c **** 
 380:Src/Sensor/I2CRoutines.c ****     return Success;
 758              		.loc 1 380 0
 759 00b6 0120     		movs	r0, #1
 760              	.LVL48:
 761 00b8 2EE0     		b	.L46
 762              	.LVL49:
 763              	.L44:
 362:Src/Sensor/I2CRoutines.c ****         /* Enable BUF IT */
 764              		.loc 1 362 0
 765 00ba 8388     		ldrh	r3, [r0, #4]
 766              	.LVL50:
 767 00bc 9BB2     		uxth	r3, r3
 768 00be 43F40073 		orr	r3, r3, #512
 769 00c2 8380     		strh	r3, [r0, #4]	@ movhi
 364:Src/Sensor/I2CRoutines.c ****         /* Set the I2C direction to Transmission */
 770              		.loc 1 364 0
 771 00c4 8388     		ldrh	r3, [r0, #4]
 772 00c6 9BB2     		uxth	r3, r3
 773 00c8 43F48063 		orr	r3, r3, #1024
 774 00cc 8380     		strh	r3, [r0, #4]	@ movhi
 366:Src/Sensor/I2CRoutines.c ****         SlaveAddress &= OAR1_ADD0_Reset;
 775              		.loc 1 366 0
 776 00ce 0021     		movs	r1, #0
 777              	.LVL51:
 778 00d0 144B     		ldr	r3, .L61+4
 779 00d2 1960     		str	r1, [r3]
 367:Src/Sensor/I2CRoutines.c ****         Address = SlaveAddress;
 780              		.loc 1 367 0
 781 00d4 05F0FE05 		and	r5, r5, #254
 782              	.LVL52:
 368:Src/Sensor/I2CRoutines.c ****         if (I2Cx == I2C1)    NumbOfBytes1 = NumByteToWrite;
 783              		.loc 1 368 0
 784 00d8 114B     		ldr	r3, .L61
 785 00da 1D70     		strb	r5, [r3]
 369:Src/Sensor/I2CRoutines.c ****         else NumbOfBytes2 = NumByteToWrite;
 786              		.loc 1 369 0
 787 00dc 124B     		ldr	r3, .L61+8
 788 00de 9842     		cmp	r0, r3
 789 00e0 02D1     		bne	.L54
 369:Src/Sensor/I2CRoutines.c ****         else NumbOfBytes2 = NumByteToWrite;
 790              		.loc 1 369 0 is_stmt 0 discriminator 1
 791 00e2 124B     		ldr	r3, .L61+12
 792 00e4 1A60     		str	r2, [r3]
 793 00e6 01E0     		b	.L55
 794              	.L54:
 370:Src/Sensor/I2CRoutines.c ****         /* Send START condition */
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 37


 795              		.loc 1 370 0 is_stmt 1
 796 00e8 114B     		ldr	r3, .L61+16
 797 00ea 1A60     		str	r2, [r3]
 798              	.L55:
 372:Src/Sensor/I2CRoutines.c ****         /* Wait until the START condition is generated on the bus: the START bit is cleared by hard
 799              		.loc 1 372 0
 800 00ec 0388     		ldrh	r3, [r0]
 801 00ee 9BB2     		uxth	r3, r3
 802 00f0 43F48073 		orr	r3, r3, #256
 803 00f4 0380     		strh	r3, [r0]	@ movhi
 804              	.L56:
 374:Src/Sensor/I2CRoutines.c ****         /* Wait until BUSY flag is reset: a STOP has been generated on the bus signaling the end
 805              		.loc 1 374 0 discriminator 1
 806 00f6 0388     		ldrh	r3, [r0]
 807 00f8 03F48073 		and	r3, r3, #256
 808 00fc 9BB2     		uxth	r3, r3
 809 00fe 002B     		cmp	r3, #0
 810 0100 F9D1     		bne	.L56
 811              	.L57:
 377:Src/Sensor/I2CRoutines.c ****     }
 812              		.loc 1 377 0 discriminator 1
 813 0102 038B     		ldrh	r3, [r0, #24]
 814 0104 03F00203 		and	r3, r3, #2
 815 0108 9BB2     		uxth	r3, r3
 816 010a 002B     		cmp	r3, #0
 817 010c F9D1     		bne	.L57
 818              		.loc 1 380 0
 819 010e 0120     		movs	r0, #1
 820              	.LVL53:
 821 0110 02E0     		b	.L46
 822              	.LVL54:
 823              	.L58:
 313:Src/Sensor/I2CRoutines.c ****         }
 824              		.loc 1 313 0
 825 0112 0020     		movs	r0, #0
 826              	.LVL55:
 827 0114 00E0     		b	.L46
 828              	.LVL56:
 829              	.L59:
 327:Src/Sensor/I2CRoutines.c ****         }
 830              		.loc 1 327 0
 831 0116 0020     		movs	r0, #0
 832              	.LVL57:
 833              	.L46:
 381:Src/Sensor/I2CRoutines.c **** }
 834              		.loc 1 381 0
 835 0118 02B0     		add	sp, sp, #8
 836              	.LCFI5:
 837              		.cfi_def_cfa_offset 8
 838              		@ sp needed
 839 011a 30BC     		pop	{r4, r5}
 840              	.LCFI6:
 841              		.cfi_restore 5
 842              		.cfi_restore 4
 843              		.cfi_def_cfa_offset 0
 844 011c 7047     		bx	lr
 845              	.L62:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 38


 846 011e 00BF     		.align	2
 847              	.L61:
 848 0120 00000000 		.word	Address
 849 0124 00000000 		.word	.LANCHOR0
 850 0128 00540040 		.word	1073763328
 851 012c 00000000 		.word	NumbOfBytes1
 852 0130 00000000 		.word	NumbOfBytes2
 853              		.cfi_endproc
 854              	.LFE29:
 856              		.section	.text.I2C_Slave_BufferReadWrite,"ax",%progbits
 857              		.align	2
 858              		.global	I2C_Slave_BufferReadWrite
 859              		.thumb
 860              		.thumb_func
 862              	I2C_Slave_BufferReadWrite:
 863              	.LFB30:
 382:Src/Sensor/I2CRoutines.c **** 
 383:Src/Sensor/I2CRoutines.c **** /**
 384:Src/Sensor/I2CRoutines.c ****   * @brief Prepares the I2Cx slave for transmission.
 385:Src/Sensor/I2CRoutines.c ****   * @param I2Cx: I2C1 or I2C2.
 386:Src/Sensor/I2CRoutines.c ****   * @param Mode: DMA or Interrupt having the highest priority in the application.
 387:Src/Sensor/I2CRoutines.c ****   * @retval : None.
 388:Src/Sensor/I2CRoutines.c ****   */
 389:Src/Sensor/I2CRoutines.c **** 
 390:Src/Sensor/I2CRoutines.c **** void I2C_Slave_BufferReadWrite(I2C_TypeDef* I2Cx,I2C_ProgrammingModel Mode)
 391:Src/Sensor/I2CRoutines.c **** {
 864              		.loc 1 391 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              		@ link register save eliminated.
 869              	.LVL58:
 392:Src/Sensor/I2CRoutines.c ****     /* Enable Event IT needed for ADDR and STOPF events ITs */
 393:Src/Sensor/I2CRoutines.c ****     I2Cx->CR2 |= I2C_IT_EVT ;
 870              		.loc 1 393 0
 871 0000 8388     		ldrh	r3, [r0, #4]
 872 0002 9BB2     		uxth	r3, r3
 873 0004 43F40073 		orr	r3, r3, #512
 874 0008 8380     		strh	r3, [r0, #4]	@ movhi
 394:Src/Sensor/I2CRoutines.c ****     /* Enable Error IT */
 395:Src/Sensor/I2CRoutines.c ****     I2Cx->CR2 |= I2C_IT_ERR;
 875              		.loc 1 395 0
 876 000a 8388     		ldrh	r3, [r0, #4]
 877 000c 9BB2     		uxth	r3, r3
 878 000e 43F48073 		orr	r3, r3, #256
 879 0012 8380     		strh	r3, [r0, #4]	@ movhi
 396:Src/Sensor/I2CRoutines.c **** 
 397:Src/Sensor/I2CRoutines.c ****     /* Enable Buffer IT (TXE and RXNE ITs) */
 398:Src/Sensor/I2CRoutines.c ****     I2Cx->CR2 |= I2C_IT_BUF;
 880              		.loc 1 398 0
 881 0014 8388     		ldrh	r3, [r0, #4]
 882 0016 9BB2     		uxth	r3, r3
 883 0018 43F48063 		orr	r3, r3, #1024
 884 001c 8380     		strh	r3, [r0, #4]	@ movhi
 885 001e 7047     		bx	lr
 886              		.cfi_endproc
 887              	.LFE30:
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 39


 889              		.section	.text.I2C_LowLevel_Init,"ax",%progbits
 890              		.align	2
 891              		.global	I2C_LowLevel_Init
 892              		.thumb
 893              		.thumb_func
 895              	I2C_LowLevel_Init:
 896              	.LFB31:
 399:Src/Sensor/I2CRoutines.c **** }
 400:Src/Sensor/I2CRoutines.c **** 
 401:Src/Sensor/I2CRoutines.c **** /**
 402:Src/Sensor/I2CRoutines.c **** * @brief  Initializes peripherals: I2Cx, GPIO, DMA channels .
 403:Src/Sensor/I2CRoutines.c ****   * @param  None
 404:Src/Sensor/I2CRoutines.c ****   * @retval None
 405:Src/Sensor/I2CRoutines.c ****   */
 406:Src/Sensor/I2CRoutines.c **** void I2C_LowLevel_Init(void)
 407:Src/Sensor/I2CRoutines.c **** {
 897              		.loc 1 407 0
 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 24
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901 0000 30B5     		push	{r4, r5, lr}
 902              	.LCFI7:
 903              		.cfi_def_cfa_offset 12
 904              		.cfi_offset 4, -12
 905              		.cfi_offset 5, -8
 906              		.cfi_offset 14, -4
 907 0002 87B0     		sub	sp, sp, #28
 908              	.LCFI8:
 909              		.cfi_def_cfa_offset 40
 408:Src/Sensor/I2CRoutines.c ****     GPIO_InitTypeDef GPIO_InitStructure;  
 409:Src/Sensor/I2CRoutines.c ****     I2C_InitTypeDef  I2C_InitStructure;    
 410:Src/Sensor/I2CRoutines.c ****     /******************** Clock Enable ********************/
 411:Src/Sensor/I2CRoutines.c ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);  
 910              		.loc 1 411 0
 911 0004 0121     		movs	r1, #1
 912 0006 0820     		movs	r0, #8
 913 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 914              	.LVL59:
 412:Src/Sensor/I2CRoutines.c ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);    
 915              		.loc 1 412 0
 916 000c 0121     		movs	r1, #1
 917 000e 0846     		mov	r0, r1
 918 0010 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 919              	.LVL60:
 413:Src/Sensor/I2CRoutines.c ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 920              		.loc 1 413 0
 921 0014 0121     		movs	r1, #1
 922 0016 4FF40010 		mov	r0, #2097152
 923 001a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 924              	.LVL61:
 414:Src/Sensor/I2CRoutines.c ****         
 415:Src/Sensor/I2CRoutines.c ****     /******************** GPIO configure ********************/
 416:Src/Sensor/I2CRoutines.c ****     GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_7;
 925              		.loc 1 416 0
 926 001e C023     		movs	r3, #192
 927 0020 ADF81430 		strh	r3, [sp, #20]	@ movhi
 417:Src/Sensor/I2CRoutines.c ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 40


 928              		.loc 1 417 0
 929 0024 0323     		movs	r3, #3
 930 0026 8DF81630 		strb	r3, [sp, #22]
 418:Src/Sensor/I2CRoutines.c ****     GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_OD;
 931              		.loc 1 418 0
 932 002a 1C23     		movs	r3, #28
 933 002c 8DF81730 		strb	r3, [sp, #23]
 419:Src/Sensor/I2CRoutines.c ****     GPIO_Init(GPIOB, &GPIO_InitStructure);          
 934              		.loc 1 419 0
 935 0030 05A9     		add	r1, sp, #20
 936 0032 1348     		ldr	r0, .L66
 937 0034 FFF7FEFF 		bl	GPIO_Init
 938              	.LVL62:
 420:Src/Sensor/I2CRoutines.c **** 
 421:Src/Sensor/I2CRoutines.c ****     /******************** Fuction configure ********************/
 422:Src/Sensor/I2CRoutines.c ****     I2C_DeInit(I2C1);
 939              		.loc 1 422 0
 940 0038 124C     		ldr	r4, .L66+4
 941 003a 2046     		mov	r0, r4
 942 003c FFF7FEFF 		bl	I2C_DeInit
 943              	.LVL63:
 423:Src/Sensor/I2CRoutines.c ****     /* I2C1 Init */
 424:Src/Sensor/I2CRoutines.c ****     I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 944              		.loc 1 424 0
 945 0040 0023     		movs	r3, #0
 946 0042 ADF80830 		strh	r3, [sp, #8]	@ movhi
 425:Src/Sensor/I2CRoutines.c ****     I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 947              		.loc 1 425 0
 948 0046 4BF6FF73 		movw	r3, #49151
 949 004a ADF80A30 		strh	r3, [sp, #10]	@ movhi
 426:Src/Sensor/I2CRoutines.c ****     I2C_InitStructure.I2C_OwnAddress1 = 0x70;
 950              		.loc 1 426 0
 951 004e 7023     		movs	r3, #112
 952 0050 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 427:Src/Sensor/I2CRoutines.c ****     I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 953              		.loc 1 427 0
 954 0054 4FF48063 		mov	r3, #1024
 955 0058 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 428:Src/Sensor/I2CRoutines.c ****     I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 956              		.loc 1 428 0
 957 005c 4FF48043 		mov	r3, #16384
 958 0060 ADF81030 		strh	r3, [sp, #16]	@ movhi
 429:Src/Sensor/I2CRoutines.c ****     I2C_InitStructure.I2C_ClockSpeed = 400000;
 959              		.loc 1 429 0
 960 0064 06AD     		add	r5, sp, #24
 961 0066 084B     		ldr	r3, .L66+8
 962 0068 45F8143D 		str	r3, [r5, #-20]!
 430:Src/Sensor/I2CRoutines.c ****     I2C_Cmd(I2C1, ENABLE);    
 963              		.loc 1 430 0
 964 006c 0121     		movs	r1, #1
 965 006e 2046     		mov	r0, r4
 966 0070 FFF7FEFF 		bl	I2C_Cmd
 967              	.LVL64:
 431:Src/Sensor/I2CRoutines.c ****     I2C_Init(I2C1, &I2C_InitStructure);
 968              		.loc 1 431 0
 969 0074 2946     		mov	r1, r5
 970 0076 2046     		mov	r0, r4
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 41


 971 0078 FFF7FEFF 		bl	I2C_Init
 972              	.LVL65:
 432:Src/Sensor/I2CRoutines.c **** }
 973              		.loc 1 432 0
 974 007c 07B0     		add	sp, sp, #28
 975              	.LCFI9:
 976              		.cfi_def_cfa_offset 12
 977              		@ sp needed
 978 007e 30BD     		pop	{r4, r5, pc}
 979              	.L67:
 980              		.align	2
 981              	.L66:
 982 0080 000C0140 		.word	1073810432
 983 0084 00540040 		.word	1073763328
 984 0088 801A0600 		.word	400000
 985              		.cfi_endproc
 986              	.LFE31:
 988              		.comm	Buffer_Tx2,255,4
 989              		.comm	Buffer_Rx2,255,4
 990              		.comm	Buffer_Tx1,255,4
 991              		.comm	Buffer_Rx1,255,4
 992              		.comm	Address,1,1
 993              		.comm	NumbOfBytes2,4,4
 994              		.comm	NumbOfBytes1,4,4
 995              		.global	I2CDirection
 996              		.comm	I2CDMA_InitStructure,44,4
 997              		.section	.bss.I2CDirection,"aw",%nobits
 998              		.align	2
 999              		.set	.LANCHOR0,. + 0
 1002              	I2CDirection:
 1003 0000 00000000 		.space	4
 1004              		.text
 1005              	.Letext0:
 1006              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/machine/_default_types
 1007              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20160926/arm-none-eabi/include/sys/_stdint.h"
 1008              		.file 5 "CMSIS/Core/CM3/stm32f10x.h"
 1009              		.file 6 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_dma.h"
 1010              		.file 7 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1011              		.file 8 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
 1012              		.file 9 "Inc/Sensor/I2CRoutines.h"
 1013              		.file 10 "STM32F10x_StdPeriph_Driver/inc/stm32f10x_rcc.h"
ARM GAS  /var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s 			page 42


DEFINED SYMBOLS
                            *ABS*:0000000000000000 I2CRoutines.c
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:20     .text.I2C_Master_BufferRead:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:25     .text.I2C_Master_BufferRead:0000000000000000 I2C_Master_BufferRead
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:597    .text.I2C_Master_BufferRead:00000000000002cc $d
                            *COM*:0000000000000001 Address
                            *COM*:0000000000000004 NumbOfBytes1
                            *COM*:0000000000000004 NumbOfBytes2
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:605    .text.I2C_Master_BufferRead:00000000000002e0 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:618    .text.I2C_Master_BufferWrite:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:623    .text.I2C_Master_BufferWrite:0000000000000000 I2C_Master_BufferWrite
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:848    .text.I2C_Master_BufferWrite:0000000000000120 $d
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:857    .text.I2C_Slave_BufferReadWrite:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:862    .text.I2C_Slave_BufferReadWrite:0000000000000000 I2C_Slave_BufferReadWrite
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:890    .text.I2C_LowLevel_Init:0000000000000000 $t
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:895    .text.I2C_LowLevel_Init:0000000000000000 I2C_LowLevel_Init
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:982    .text.I2C_LowLevel_Init:0000000000000080 $d
                            *COM*:00000000000000ff Buffer_Tx2
                            *COM*:00000000000000ff Buffer_Rx2
                            *COM*:00000000000000ff Buffer_Tx1
                            *COM*:00000000000000ff Buffer_Rx1
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:1002   .bss.I2CDirection:0000000000000000 I2CDirection
                            *COM*:000000000000002c I2CDMA_InitStructure
/var/folders/g9/bbpj86ld7fx45vd1b3pqxmp00000gn/T//ccmFwv8e.s:998    .bss.I2CDirection:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
I2C_GenerateSTOP
RCC_APB2PeriphClockCmd
RCC_APB1PeriphClockCmd
GPIO_Init
I2C_DeInit
I2C_Cmd
I2C_Init
